<web-fragment xmlns="http://java.sun.com/xml/ns/javaee"
              xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
              xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-fragment_3_0.xsd"
              version="3.0"
              metadata-complete="true">

	<!-- Contains webapp configuration for common features of RTWS APIs -->
	
	<name>rtws-webfragment-api-common</name>
	
	<ordering>
		<before>
			<others />
		</before>
	</ordering>
	
	<listener>
    <listener-class>com.deleidos.rtws.commons.webapp.listener.LoggingConfig</listener-class>
  </listener>
  
  
  <!-- This generic error pages will be presented if you respond with an HTTP error code and provide no details (i.e. no response body) -->
  <error-page>
  	<location>/errorPages/generalErrorCode.jsp</location>
  </error-page>
  
  <!--
  	This generic error will be presented if your handling code throws an
  	uncaught exception.
  	
  	REST Usage:
  	This will not handle WebApplicationException instances thrown from REST
  	resources.  Those exceptions are handled and logged by the jax-rs impl which
  	will respond with the applicable Response.Status error code.
  	
  	If a response entity is provided, that entity will be returned.  If the response
  	entity is empty, those responses will be routed through the above
  	error code handlers just as a standard servlet.
  	
  	Developers should throw the applicable WebApplicationException passing any caught
  	exceptions to the WebApplicationException for logging purposes.  The entity details
  	from the api should not include stack traces or other internal information. 
   -->
  <error-page>
  	<exception-type>java.lang.Throwable</exception-type>
  	<location>/errorPages/generalErrorCode.jsp</location>
  </error-page>
</web-fragment>