#additional properties for when composer are not linked in a chain, allows for individual composers to run
#withou dependency on other composers for additional properties

build.domain=${system.domain}
build.niamod=${system.niamod}
build.region=${system.region}

h2.dim.schema=DIMENSIONS
h2.app.schema=APPLICATION
#[generated in default property composer]h2.connection.url=jdbc:h2:tcp://${tms.dns}:8161/commondb;MULTI_THREADED=1;MAX_OPERATION_MEMORY=268435456
#[generated in default property composer]h2.dim.connection.url=jdbc:h2:tcp://${tms.dns}:8161/commondb;SCHEMA_SEARCH_PATH=${h2.dim.schema};MULTI_THREADED=1;MAX_OPERATION_MEMORY=268435456
#[generated in default property composer]h2.app.connection.url=jdbc:h2:tcp://${tms.dns}:8161/commondb;SCHEMA_SEARCH_PATH=${h2.app.schema};MULTI_THREADED=1;MAX_OPERATION_MEMORY=268435456
h2.dim.connection.user=INGEST
h2.dim.connection.password=redacted
h2.app.connection.user=APPUSER
h2.app.connection.password=redacted
h2.sa.connection.user=SA
h2.sa.connection.password=redacted


# RTWS General Settings
rtws.path.home=/usr/local/rtws
rtws.path.data=/mnt/rdafs
rtws.appfs.path=/mnt/appfs
rtws.default.webapp.scheme=https
rtws.internal.webapp.scheme=https
rtws.internal.webapp.unsecured.scheme=http
rtws.default.webapp.host=default.${build.domain}
rtws.api.webapp.host=${rtws.default.webapp.host}
rtws.default.webapp.port=443
rtws.internal.webapp.port=8443
rtws.internal.webapp.unsecured.port=80
rtws.default.webapp.ssl.keystore.path=DEFAULT
rtws.environment.jmx.port=29292
rtws.environment.jmx.connector=jmxrmi
rtws.auto.terminate.pipeline=true
rtws.auto.scaling=${can.scale}
ntp.server=TBD

#RTWS General keystore properties
rtws.internal.keystore=/usr/local/rtws/boot-apps/.key/internal-ssl-keystore
rtws.internal.keystore.password=redacted
rtws.external.keystore=/usr/local/rtws/boot-apps/.key/external-ssl-keystore
rtws.external.keystore.password=redacted
rtws.keystore=/usr/local/rtws/boot-apps/.key/ssl-keystore
rtws.keystore.password=redacted
rtws.truststore=/usr/local/rtws/boot-apps/.key/ssl-truststore
rtws.truststore.password=redacted
rtws.default.internal.certificate.alias=private_domain_instance
rtws.default.external.certificate.alias=server

# Messaging Server Settings
messaging.external.connection.user=system
messaging.external.connection.password=redacted
messaging.internal.connection.user=system
messaging.internal.connection.password=redacted
messaging.queue.external.name=com.deleidos.rtws.parse
messaging.queue.router.name=com.deleidos.rtws.router
messaging.queue.dlq.name=com.deleidos.rtws.DLQ?consumer.prefetchSize=0
messaging.queue.parse.name=com.deleidos.rtws.parse
messaging.queue.enrich.name=com.deleidos.rtws.enrich
messaging.queue.filter.name=com.deleidos.rtws.filter
messaging.queue.index.name=com.deleidos.rtws.index
messaging.topic.alert.name=com.deleidos.rtws.alert
messaging.queue.script.name=com.deleidos.rtws.script
messaging.all.internal.datasink.queues=${datasink.internal.queues}

# LDAP Server Settings
#[generated in default property composer]ldap.provider.url=ldap://${tms.dns}:10389
ldap.search.baseDn=dc=deleidos|dc=com
ldap.search.usersRdn=ou=users
ldap.authentication=simple
ldap.principal=uid=admin|ou=system
ldap.credentials=redacted

# AccountsDB Database Server Settings
accountsdb.connection.url=jdbc:h2:${rtws.path.data}/accountsdb
accountsdb.connection.sysAdmin.user=sa
accountsdb.conncetion.sysAdmin.password=redacted
accountsdb.connection.standard.user=sa
accountsdb.conncetion.standard.password=redacted

# Master Controller Setting
master.path.home=${rtws.path.home}/master
master.host.name=master.${build.domain}
master.jmx.port=1099
master.jmx.connector=jmxrmi
master.jmx.url=service:jmx:rmi:///jndi/rmi://${master.host.name}:${master.jmx.port}/${master.jmx.connector}
# TODO update the rtws.cloud.provider references below if they ever change ([AWS|EUC])
master.EUC.max.concurrent.process.allocation=3
master.AWS.max.concurrent.process.allocation=5

# Ingest Application Settings
ingest.path.home=${rtws.path.home}/ingest
ingest.gate.home=src/gate

# MongoDB settings
mongo.database.name=RTWS
mongo.server.host=mongodb-node1.nightly.rtws.deleidos.com
mongo.server.port=27017
mongo.path.index=${rtws.path.data}/mongodb

# WebApp Settings: Accounts
webapp.accounts.url.scheme=https
#[generated in default property composer]webapp.accounts.url.host=${tenant.gateway.host}
webapp.accounts.url.port=443
webapp.accounts.url.contextPath=/accounts
webapp.accounts.url.path=${webapp.accounts.url.scheme}://${webapp.accounts.url.host}:${webapp.accounts.url.port}/accounts

# WebApp Settings: Gateway API
webapp.gatewayapi.url.scheme=${rtws.internal.webapp.scheme}
#[generated in default property composer]webapp.gatewayapi.url.host=${tenant.gateway.host}
webapp.gatewayapi.url.port=${rtws.internal.webapp.port}
webapp.gatewayapi.url.contextPath=/gatewayapi
webapp.gatewayapi.internal.url.path=${webapp.gatewayapi.url.scheme}://${webapp.gatewayapi.url.host}:${webapp.gatewayapi.url.port}/gatewayapi
webapp.gatewayapi.external.url.path=${rtws.default.webapp.scheme}://${webapp.gatewayapi.url.host}:${rtws.default.webapp.port}/gatewayapi
webapp.gatewayapi.url.path=${webapp.gatewayapi.internal.url.path}

# WebApp Settings: Schedule API
webapp.scheduleapi.url.scheme=${rtws.internal.webapp.scheme}
webapp.scheduleapi.url.host=${tenant.gateway.host}
webapp.scheduleapi.url.port=${rtws.internal.webapp.port}
webapp.scheduleapi.url.contextPath=/scheduleapi
webapp.scheduleapi.internal.url.path=${webapp.scheduleapi.url.scheme}://${webapp.scheduleapi.url.host}:${webapp.scheduleapi.url.port}${webapp.scheduleapi.url.contextPath}
webapp.scheduleapi.external.url.path=${rtws.default.webapp.scheme}://${webapp.scheduleapi.url.host}:${rtws.default.webapp.port}${webapp.scheduleapi.url.contextPath}
webapp.scheduleapi.url.path=${webapp.scheduleapi.internal.url.path}

# WebApp Settings: AlertsAPI
webapp.alertsapi.url.scheme=${rtws.internal.webapp.scheme}
webapp.alertsapi.url.host=${rtws.default.webapp.host}
webapp.alertsapi.url.port=${rtws.internal.webapp.port}
webapp.alertsapi.url.contextPath=/alertsapi
webapp.alertsapi.internal.url.path=${webapp.alertsapi.url.scheme}://${webapp.alertsapi.url.host}:${webapp.alertsapi.url.port}/alertsapi
webapp.alertsapi.external.url.path=${rtws.default.webapp.scheme}://${webapp.alertsapi.url.host}:${rtws.default.webapp.port}/alertsapi
webapp.alertsapi.url.path=${webapp.alertsapi.internal.url.path}

# WebApp Settings: MetricsAPI
webapp.metricsapi.refresh.cluster=15000
webapp.metricsapi.refresh.messaging=15000
webapp.metricsapi.refresh.ingest=15000
webapp.metricsapi.refresh.storage=15000
webapp.metricsapi.url.scheme=${rtws.internal.webapp.scheme}
webapp.metricsapi.url.host=${rtws.default.webapp.host}
webapp.metricsapi.url.port=${rtws.internal.webapp.port}
webapp.metricsapi.url.contextPath=/metricsapi
webapp.metricsapi.internal.url.path=${webapp.metricsapi.url.scheme}://${webapp.metricsapi.url.host}:${webapp.metricsapi.url.port}/metricsapi
webapp.metricsapi.external.url.path=${rtws.default.webapp.scheme}://${webapp.metricsapi.url.host}:${rtws.default.webapp.port}/metricsapi
webapp.metricsapi.url.path=${webapp.metricsapi.internal.url.path}

# WebApp Settings: DB Rest API
webapp.dbapi.url.scheme=${rtws.internal.webapp.scheme}
webapp.dbapi.url.host=${tenant.gateway.host}
webapp.dbapi.url.port=${rtws.internal.webapp.port}
webapp.dbapi.url.contextPath=/dbapi
webapp.dbapi.internal.url.path=${webapp.dbapi.url.scheme}://${webapp.dbapi.url.host}:${webapp.dbapi.url.port}/dbapi
webapp.dbapi.external.url.path=${rtws.default.webapp.scheme}://${webapp.dbapi.url.host}:${rtws.default.webapp.port}/dbapi
webapp.dbapi.url.path=${webapp.dbapi.internal.url.path}

# WebApp Settings: Log Rest API
webapp.logapi.url.scheme=${rtws.internal.webapp.scheme}
webapp.logapi.url.host=${rtws.api.webapp.host}
webapp.logapi.url.port=${rtws.internal.webapp.port}
webapp.logapi.url.contextPath=/logapi
webapp.logapi.internal.url.path=${webapp.logapi.url.scheme}://${webapp.logapi.url.host}:${webapp.logapi.url.port}/logapi
webapp.logapi.external.url.path=${rtws.default.webapp.scheme}://${webapp.logapi.url.host}:${rtws.default.webapp.port}/logapi
webapp.logapi.url.path=${webapp.logapi.internal.url.path}

# WebApp Settings: Repository
webapp.repository.rmi.host=${master.host.name}
webapp.repository.store.dir=${rtws.path.data}/repository
webapp.repository.tenant.manager=false
webapp.repository.admin.userid=admin
webapp.repository.admin.password=redacted
webapp.repository.tenant.password=redacted
webapp.repository.tempdir=temp
webapp.repository.type=jcr
webapp.repository.configDir=${rtws.appfs.path}
webapp.repository.timer.sync.interval=0
webapp.repository.timer.cleanup.interval=15
webapp.repository.tenant.manager.url.scheme=${rtws.internal.webapp.scheme}
webapp.repository.tenant.manager.url.host=default.tms-dev.deleidos.com
webapp.repository.tenant.manager.url.port=${rtws.internal.webapp.port}
webapp.repository.tenant.manager.auth.port=9443
webapp.repository.tenant.manager.internal.url.path=${webapp.repository.tenant.manager.url.scheme}://${webapp.repository.tenant.manager.url.host}:${webapp.repository.tenant.manager.url.port}/proxy/rtws/repository
webapp.repository.tenant.manager.external.url.path=${rtws.default.webapp.scheme}://${webapp.repository.tenant.manager.url.host}:${rtws.default.webapp.port}/proxy/rtws/repository
webapp.repository.tenant.manager.url.path=${webapp.repository.tenant.manager.internal.url.path}
webapp.repository.url.scheme=${rtws.internal.webapp.scheme}
webapp.repository.url.host=master.${build.domain}
webapp.repository.url.port=${rtws.internal.webapp.port}
webapp.repository.url.contextPath=/repository
webapp.repository.internal.url.path=${webapp.repository.url.scheme}://${webapp.repository.url.host}:${webapp.repository.url.port}/repository
webapp.repository.external.url.path=${rtws.default.webapp.scheme}://${webapp.repository.url.host}:${rtws.default.webapp.port}/repository
webapp.repository.url.path=${webapp.repository.internal.url.path}
webapp.repository.processes.file=/home/rtws/processes.xml

# WebApp Settings: Search
webapp.search.url.scheme=${rtws.default.webapp.scheme}
webapp.search.url.host=${rtws.default.webapp.host}
webapp.search.url.port=${rtws.default.webapp.port}
webapp.search.internal.url.path=${rtws.internal.webapp.scheme}://${webapp.search.url.host}:${rtws.internal.webapp.port}/search
webapp.search.external.url.path=${webapp.search.url.scheme}://${webapp.search.url.host}:${webapp.search.url.port}/search
webapp.search.url.path=${webapp.search.external.url.path}

# WebApp Settings: SearchAPI
webapp.searchapi.solr.ping.timeout=100
webapp.searchapi.zoie.resource.port=61666
webapp.searchapi.shard.timer.interval-min=2
webapp.searchapi.url.scheme=${rtws.default.webapp.scheme}
webapp.searchapi.url.host=${rtws.default.webapp.host}
webapp.searchapi.url.port=${rtws.default.webapp.port}
webapp.searchapi.url.contextPath=/searchapi
webapp.searchapi.internal.url.path=${rtws.internal.webapp.scheme}://${webapp.searchapi.url.host}:${rtws.internal.webapp.port}/searchapi
webapp.searchapi.external.url.path=${webapp.searchapi.url.scheme}://${webapp.searchapi.url.host}:${webapp.searchapi.url.port}/searchapi
webapp.searchapi.url.path=${webapp.searchapi.external.url.path}

# WebApp Settings: AlertViz Servlet
webapp.alertviz.servlet.googleEarthHost=webapps-default.${build.domain}
webapp.alertviz.servlet.googleEarthPort=${rtws.default.webapp.port}

# GotoMetrics Settings
gtm.datasink.temp.dir=${rtws.path.data}/gtm/temp
gtm.datasink.dest.dir=gtm

# Transport Settings
messaging.header.format=Data.Format
messaging.header.filename=source
transport.path.home=/usr/local/rtws/transport
messaging.delivery.persistent=true

# Allowed Directories for Log Transmission
# Note: Current code assumes no trailing '/' so don't add one :)
log.transport.allowed.directories=/var/log;/usr/local/jetty/logs;/usr/local/apache-activemq/data;/usr/local/rtws/ingest/logs;/usr/local/rtws/master/logs;/usr/local/rtws/transport/logs;/usr/local/rtws/boot-apps/logs;/usr/local/apacheds/logs;/var/log/cassandra;/var/log/hadoop;/var/log/hive;/usr/local/rtws/h2logs;/var/log/hadoop-hdfs;/var/log/hadoop-mapreduce;/var/log/hadoop-yarn;/var/log/hadoop-0.20-mapreduce;/var/log/zookeeper;

# Of those log directories allowed, apply filename filtering to these directories  (Aka only should files matching x pattern from these directories)
log.transport.allowed.filter.directories=/var/log;

#consolidated endpoints
rtws.interfaces.config.path=/usr/local/rtws/conf

# Webapp Settings: DNSAPI
webapp.dnsapi.url.scheme=${rtws.internal.webapp.scheme}
webapp.dnsapi.url.host=${tenant.gateway.host}
webapp.dnsapi.url.port=${rtws.internal.webapp.port}
webapp.dnsapi.url.contextPath=/dnsapi
webapp.dnsapi.internal.url.path=${webapp.dnsapi.url.scheme}://${webapp.dnsapi.url.host}:${webapp.dnsapi.url.port}/dnsapi
webapp.dnsapi.external.url.path=${rtws.default.webapp.scheme}://${webapp.dnsapi.url.host}:${rtws.default.webapp.port}/dnsapi
webapp.dnsapi.url.path=${webapp.dnsapi.internal.url.path}

# Webapp proxy settings: Auth node gatewayapi
webapp.authapi.url.scheme=${rtws.internal.webapp.scheme}
webapp.authapi.url.host=auth.${build.domain}
webapp.authapi.url.port=${rtws.internal.webapp.port}
webapp.authapi.url.contextPath=/gatewayapi

#remove after change
#[generated in default property composer]tenant.dns.url=http://auth.@build.domain@/dnsapi

#CA
webapp.caapi.url.scheme=${rtws.default.webapp.scheme}
webapp.caapi.url.host=${tenant.gateway.host}
webapp.caapi.url.port=${rtws.default.webapp.port}
webapp.caapi.url.contextPath=/caapi
webapp.caapi.internal.url.path=${webapp.caapi.url.scheme}://${webapp.caapi.url.host}:${webapp.caapi.url.port}/caapi
webapp.caapi.external.url.path=${rtws.default.webapp.scheme}://${webapp.caapi.url.host}:${rtws.default.webapp.port}/caapi
webapp.caapi.url.path=${webapp.caapi.internal.url.path}

# Content Downloader settings
content.downloader.retry.threshold=1000
content.downloader.retry.delay=20000

#SSL Property Setup

#jms ssl setup
jms.internal.keystore=${rtws.internal.keystore}
jms.internal.keystore.password=${rtws.internal.keystore.password}
jms.external.keystore=${rtws.external.keystore}
jms.external.keystore.password=${rtws.external.keystore.password}
jms.keystore=${jms.external.keystore}
jms.keystore.password=${jms.external.keystore.password}
jms.truststore=${rtws.truststore}
jms.truststore.password=${rtws.truststore.password}

# TODO: Remove the shutdown properties when all systems are converted to using the
# listener properties.

#shutdown ssl setup 
shutdown.internal.keystore=${rtws.internal.keystore}
shutdown.internal.keystore.password=${rtws.internal.keystore.password}
shutdown.external.keystore=${rtws.external.keystore}
shutdown.external.keystore.password=${rtws.external.keystore.password}
shutdown.keystore=${shutdown.internal.keystore}
shutdown.keystore.password=${shutdown.internal.keystore.password}
shutdown.truststore=${rtws.truststore}
shutdown.truststore.password=${rtws.truststore.password}

#command listener ssl setup
listener.internal.keystore=${rtws.internal.keystore}
listener.internal.keystore.password=${rtws.internal.keystore.password}
listener.external.keystore=${rtws.external.keystore}
listener.external.keystore.password=${rtws.external.keystore.password}
listener.keystore=${shutdown.internal.keystore}
listener.keystore.password=${shutdown.internal.keystore.password}
listener.truststore=${rtws.truststore}
listener.truststore.password=${rtws.truststore.password}

#cas properties
#[generated in default property composer]cas.service.url.host=
cas.service.webapp.scheme=${rtws.default.webapp.scheme}
cas.service.webapp.port=${rtws.default.webapp.port}
cas.service.ticket.validation.url=${rtws.internal.webapp.scheme}://${webapp.accounts.url.host}:${rtws.internal.webapp.port}${webapp.accounts.url.contextPath}
cas.service.webapp.account.url=${cas.service.webapp.scheme}://${cas.service.url.host}:${cas.service.webapp.port}${webapp.accounts.url.contextPath}

#default webapp host cas property
cas.service.rtws.default.webapp.host=${rtws.default.webapp.host}

#process group names to have their /etc/hosts files modified as a workaround for reverse dns resolution required for Euca
rtws.pgroups.to.etc.hosts=hadoop.datanode;hadoop.namenode;hadoop.jobtracker;hive.metastore;hue.server;zookeeper;

# For those Docker images which are re-used accross systems (mongo, kibana, etc...), this is the release of them to use
docker.image.reusable.release=2.1.1-SNAPSHOT

# Docker run command template for appliance containers
docker.run.template=docker run -d ${volume.mapping} --dns $DNSIP --dns-search $DOMAIN ${port.mapping} -m ${memory.limit} \
   --name ${process.group.prefix} --add-host $APPLIANCE_HOST_FQDN:$APPLIANCE_HOST_IP -e AWS_MARKETPLACE_P=$AWS_MARKETPLACE_P \
   -e RTWS_BYPASS= -e RTWS_DOMAIN=${build.domain} -e RTWS_FQDN=${process.group.prefix}.${build.domain} \
   -e RTWS_RELEASE=${system.release} -e RTWS_PROCESS_GROUP=${process.group} -e RTWS_APPLIANCE_HOST_FQDN=$APPLIANCE_HOST_FQDN \
   -e RTWS_APPLIANCE_SYSTEM=${build.domain} -e RTWS_CONTAINER_MAX_MEMORY=${memory.limit.without.unit} \
   -e RTWS_INGEST_CONFIG=${ingest.config.filename} digitaledge/${build.domain.prefix}:${system.release}
   
# Docker run command for reusable containers (mongo, kibana, etc...)
docker.run.reusable.template=docker run -d ${volume.mapping} --dns $DNSIP --dns-search $DOMAIN ${port.mapping} -m ${memory.limit} \
   --name ${process.group.prefix} --add-host $APPLIANCE_HOST_FQDN:$APPLIANCE_HOST_IP -e AWS_MARKETPLACE_P=$AWS_MARKETPLACE_P \
   -e RTWS_DOMAIN=${build.domain} -e RTWS_FQDN=${process.group.prefix}.${build.domain} \
   -e RTWS_PROCESS_GROUP=${process.group} -e RTWS_APPLIANCE_HOST_FQDN=$APPLIANCE_HOST_FQDN \
   -e RTWS_APPLIANCE_SYSTEM=${build.domain} -e RTWS_CONTAINER_MAX_MEMORY=${memory.limit.without.unit} digitaledge/${docker.image.reusable.prefix}:${docker.image.reusable.release}

# Kubernetes creation statement template for appliance containers
kubernetes.create.template=cd /opt/kubernetes && cluster/kubectl.sh create -f ${kubernetes.component.json}

docker.container.name=${build.domain.prefix}
docker.container.image.name=digitaledge/${build.domain.prefix}:${system.release}
docker.container.image.reusable.name=digitaledge/${docker.image.reusable.prefix}:${docker.image.reusable.release}
docker.container.env=RTWS_BYPASS=${rtws.bypass}; \
   RTWS_DOMAIN=${build.domain}; \
   RTWS_FQDN=${process.group.prefix}.${build.domain}; \
   RTWS_RELEASE=${system.release}; \
   RTWS_PROCESS_GROUP=${process.group}; \
   RTWS_APPLIANCE_HOST_FQDN=$APPLIANCE_HOST_FQDN; \
   RTWS_APPLIANCE_SYSTEM=${build.domain}; \
   RTWS_CONTAINER_MAX_MEMORY=${memory.limit.without.unit} \
   RTWS_INGEST_CONFIG=${ingest.config.filename}
   
# ZFS filesystem creation command template for fixed sized storage for applicable containers
# expected:) zfs create de_volumes/sha256(jms-ext-node1.test-logs.logs.elastic4.com) -o quota=30gb -o mountpoint=/sha256(applianceDomain)/sha256(process.group.fqdn.prefix)
zfs.filesystem.creation.template=/sbin/zfs create de_volumes/${fqdn} -o quota=${filesystem.quota}gb -o mountpoint=${mount.point}
zfs.filesystem.property.domain.template=/sbin/zfs set de:domain=${build.domain} de_volumes/${fqdn}
zfs.filesystem.property.processgroup.template=/sbin/zfs set de:processgroup=${process.group.prefix} de_volumes/${fqdn}
zfs.filesystem.property.compression.template=/sbin/zfs set compression=lz4 de_volumes/${fqdn}

system.status.email.text.template=The ${system.domain} system has transitioned to the ${system.status} state.  Please view it's status in \
	Management Console by visiting: ${webapp.repository.tenant.manager.url.scheme}://${webapp.repository.tenant.manager.url.host}