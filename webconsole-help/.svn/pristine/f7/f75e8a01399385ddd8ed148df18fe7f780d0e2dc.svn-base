<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" class="HelpTopic" data-mc-search-type="Stem" data-mc-help-system-file-name="Default.xml" data-mc-path-to-help-system="../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-medium="non-print" data-mc-toc-path="Sample Code|Creating a transport">
    <!-- saved from url=(0016)http://localhost -->
    <head>
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Sample transport</title>
        <link href="../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../resources/stylesheets/leidos_sdk.css" rel="stylesheet" />
        <script src="../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <h3 class="Heading3"><a name="kanchor7"></a>SimpleLocalFileTransportService.java</h3><pre xml:space="preserve">
package &lt;your package&gt;;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;

import com.deleidos.rtws.core.framework.Description;
import com.deleidos.rtws.core.framework.UserConfigured;
import com.deleidos.rtws.transport.AbstractTransportService;
import com.deleidos.rtws.transport.TransportService;

@Description("Simple example of a <span class="VariablesProductName">DigitalEdge</span> TransportService that reads files 
	from a directory, reads the contents of the files," +
	" and pushes JMS messages into <span class="VariablesProductName">DigitalEdge</span>")
public class SimpleLocalFileTransportService extends AbstractTransportService {

	private String watchedDirectory;
	private DirWatcherRunner runner;
	private int messagesSent = 0; 
	
	public int getMessagesSent() {
		return messagesSent;
	}

	@UserConfigured(value = "/usr/local/data", description = "The local directory to 
		poll for data to " + "transmit into the system.", flexValidator = { 
		"StringValidator minLength=3 maxLength=63" })
	public void setWatchedDirectory(String val) {
		watchedDirectory = val;
	}

	public String getWatchedDirectory() {
		return watchedDirectory;
	}

	/**
	* Start this Transport service.
	* @see TransportService#execute()
	*/
	@Override
	public void execute() {
		runner = new DirWatcherRunner(watchedDirectory);
		Thread fileWatcher = new Thread(runner);
		try {
			fileWatcher.start();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	* Close any open resources and stop the transport.
	* @see TransportService#terminate()
	*/
	@Override
	public void terminate() {
		try {
			runner.setStop(true);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	*  Runnable to read the file stream, split into lines, and send as a JMS message.
	*/
	private class DirWatcherRunner implements Runnable {

		private String watchedDirectory;
		private boolean stop = false;

		public void setStop(boolean stop) {
			this.stop = stop;
		}

		public DirWatcherRunner(String watchedDirectory) {
			this.watchedDirectory = watchedDirectory;
		}

		public void run() {
			try {
				while (!stop) {
					File watchDir = new File(watchedDirectory);
					if (watchDir.isDirectory()) {
						for (File f: watchDir.listFiles()) {
							if (f.isFile()) {
								FileInputStream stream = new FileInputStream(f);
								BufferedReader reader = new BufferedReader(
									new InputStreamReader(stream, "UTF-8"));
								String record = reader.readLine();
								while (record != null) {
									// SendJMSMessage is the key method to push JMS 
										messages into the system
									SendJMSMessage(record);
									messagesSent++;
									record = reader.readLine();
								}
								stream.close();
								//f.delete();
							}
						}
					}
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}

}</pre>
        <p class="Front">&#160;</p>
        <p class="Front">&#160;</p>
        <p class="FooterNonPrint">For  Technical Support, contact: <span class="VariablesEmail">DigitalEdgeSupport@Leidos.com</span></p>
        <p class="FooterNonPrint">To submit ideas or feedback, go to https://www9.v1ideas.com/digitaledge/welcome</p>
        <p class="FooterNonPrint">Â© <span class="VariablesCompanyName">Leidos</span>. All rights reserved</p>
    </body>
</html>