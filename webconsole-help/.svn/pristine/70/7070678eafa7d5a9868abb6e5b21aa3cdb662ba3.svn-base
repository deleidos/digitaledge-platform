<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" class="HelpTopic" data-mc-search-type="Stem" data-mc-help-system-file-name="Default.xml" data-mc-path-to-help-system="../../" data-mc-conditions="Default.SharedW/Ops" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-medium="non-print" data-mc-toc-path="Planning a System">
    <!-- saved from url=(0016)http://localhost -->
    <head>
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Getting data in with transports</title>
        <link href="../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../resources/stylesheets/leidos.css" rel="stylesheet" />
        <script src="../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <h2 class="Heading2"><a name="kanchor21"></a>Getting data in with transports</h2>
        <p>Each data source must be associated with a transport mode to get data into <span class="VariablesProductName">DigitalEdge</span>. Transports simply move data into <span class="VariablesProductName">DigitalEdge</span> wrapped in JMS messages; they do not convert data to JSON.</p>
        <p>Ingest supports several secure automated transport mechanisms, including file-based transfer protocols, streaming TCP and UDP connections, external database queries, and unstructured documents. For example, the TCP transport establishes a TCP socket listening to a port, converts it to JMS messages, and pushes the data into the JMS external node. Each parser can be assigned to a different transport type of your choice. If you need a transport that is not included in the core release, your developers can create a custom transport for your site.</p>
        <h3 class="Heading3"><a name="kanchor22"></a>DatabaseWatcherTransportService</h3>
        <p>The Database Watcher transport is a specialized polling service that gets data from a database and pulls it into <span class="VariablesProductName">DigitalEdge</span> by running an SQL&#160;select query against any database. The database can be queried regularly, starting at the point where the query last left off. An S3 bucket is used to store a backup copy of the data file.</p>
        <h3 class="Heading3">DirectoryCrawlerTransportService</h3>
        <p>The Directory Crawler beta transport is similar to the Directory Watcher transport, processing data in a local or remote file system. But it also decompresses zipped files and processes files that match wild card patterns.</p>
        <h3 class="Heading3"><a name="kanchor23"></a>DirectoryWatcherTransportService</h3>
        <p>This transport is a polling service similar to the PollingS3TransportService. This transport watches a local or remote file system rather than an S3™ bucket. Use the Directory Watcher transport when you have data files that you do not want to move to S3.</p>
        <h3 class="Heading3"><a name="kanchor24"></a>HiveTransportService</h3>
        <p>The Hive transport is a specialized transport that gets data from an existing Hive data sink and pulls it into  another data sink, either in the same <span class="VariablesProductName">DigitalEdge</span> system or another <span class="VariablesProductName">DigitalEdge</span> system. For example, you might store enriched data in Hive and then transport it to a Lucene data sink for indexing. You can optionally create an SQL select query to run against Hive to pull out a subset of data.</p>
        <h3 class="Heading3"><a name="kanchor25"></a>JMSBridgeTransportService</h3>
        <p>This service copies data directly from your corporate JMS server to the <span class="VariablesProductName">DigitalEdge</span> JMS server without a transport. If your shop has multiple JMS brokers, this is probably the easiest service to use. The JMS Bridge Service pushes data directly onto a JMS queue without a transport.&#160; For example, there could be two JMS servers in play: a corporate JMS server and the <span class="VariablesProductName">DigitalEdge</span> JMS server; the bridge pushes data from your enterprise queue to <span class="VariablesProductName">DigitalEdge</span>. If you do not use JMS internally, you should choose another transport from the <span class="VariablesProductName">DigitalEdge</span> repository.</p>
        <h3 class="Heading3"><a name="kanchor26"></a>MongoDBTransportService</h3>
        <p>The MongoDB transport is a specialized transport that gets data from an existing MongoDB data sink and pulls it into  another data sink, either in the same <span class="VariablesProductName">DigitalEdge</span> system or another <span class="VariablesProductName">DigitalEdge</span> system. For example, you might store enriched data in MongoDB and then transport it to a Lucene data sink for indexing. You can optionally create an SQL select statement to run against MongoDB to pull out just a subset of data.</p>
        <h3 class="Heading3"><a name="kanchor27"></a>PcapSnifferTransportService</h3>
        <p>This transport captures and splits pcap packets on a specific network interface. You can optionally filter out data and pull selected relevant data. The pcap transport is often used with the SNMP PCAP parser.</p>
        <h3 class="Heading3"><a name="kanchor28"></a>S3FileTransportService</h3>
        <p>The S3 transport service is a good choice when you have one or more static files, such as legacy data, to get into <span class="VariablesProductName">DigitalEdge</span>. This S3 transport can be configured two ways. As a one shot event, it pulls data from an Amazon’s S3™ (Simple Storage Service™) file and pushes it to the <span class="VariablesProductName">DigitalEdge</span> JMS queue. Or, you can configure the transport to poll an S3™ bucket regularly at a set time interval. Choose this option when you have an existing system that is generating large files and you are adding <span class="VariablesProductName">DigitalEdge</span> to the system as the big data processor and analyzer. Set up buckets for data feeds from several data sources, one bucket per data type. Use the polling transport to check the bucket for new data every several minutes, hours, or once a day, depending on your time-to-availability requirements.You can configure this transport to either save the file or delete it immediately after processing.</p>
        <h3 class="Heading3"><a name="kanchor29"></a>TCPTransportService</h3>
        <p>This is a commonly used transport, to read data in a TCP stream. The TCP socket listens to a port, converts the data to a JMS message, and puts it on the JMS external queue.</p>
        <h3 class="Heading3"><a name="kanchor30"></a>TwitterFilterTransportService</h3>
        <p>This  transport gets Tweets from the Twitter feed based on criteria that you define via the Twitter Search API. You can search for keywords and/or Twitter usernames. This is the most flexible and commonly used transport of the three Twitter transports. </p>
        <h3 class="Heading3"><a name="kanchor31"></a>TwitterRESTTransportService</h3>
        <p>This  transport follows the Tweets of one Twitter user. The transport uses the Twitter REST API.</p>
        <h3 class="Heading3"><a name="kanchor32"></a>TwitterSampleTransportService</h3>
        <p>This  transport selects a random sample of Tweets that you are allowed to read in the Twitter feed. The transport uses the Twitter Search API.</p>
        <h3 class="Heading3"><a name="kanchor33"></a>UDPTransportService</h3>
        <p>This frequently used transport captures network packets in a UDP stream, converts the data to JMS messages, and sends them to the JMS external node.</p>
        <h3 class="Heading3"><a name="kanchor34"></a>URLTransportService</h3>
        <p>This transport reads the contents of a URL and puts it on the JMS input queue. Use this transport to pull data from an RSS&#160;feed or from any service that pulls resources from another organization or data source.</p>
        <p class="Front">&#160;</p>
        <p class="Front">&#160;</p>
        <p class="FooterNonPrint">For  Technical Support, contact: <span class="VariablesEmail">DigitalEdgeSupport@Leidos.com</span></p>
        <p class="FooterNonPrint">To submit ideas or feedback, go to https://www9.v1ideas.com/digitaledge/welcome</p>
        <p class="FooterNonPrint">© <span class="VariablesCompanyName">Leidos</span>. All rights reserved</p>
    </body>
</html>