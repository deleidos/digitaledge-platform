<?xml version="1.0" encoding="utf-8"?><index PreMerged="false" SearchType="Stem" NGramSize="1"><!-- saved from url=(0016)http://localhost -->
<urls><Url Source="../content/welcome.htm" Title="Welcome" Abstract="Welcome to DigitalEdge™ Version 1.3 SDK  Help " /><Url Source="../content/sdk_developer_s_guide/introduction.htm" Title="Introduction" Abstract="Introduction The DigitalEdge SDK provides several APIs to easily create custom components for DigitalEdge’s processing pipeline. The ingest pipeline consists of:" /><Url Source="../content/product_documentation.htm" Title="Product documentation" Abstract="Product documentation DigitalEdge is a complex big data platform. The system comes with a complete set of documentation in PDF and HTML5 formats to help you master DigitalEdge:" /><Url Source="../content/conventions.htm" Title="Typographical conventions" Abstract="Typographical conventions The following style conventions are used throughout this documentation: " /><Url Source="../content/sdk_developer_s_guide/what_the_sdk_includes.htm" Title="What the SDK includes" Abstract="What the SDK includes The DigitalEdge SDK includes the following components: " /><Url Source="../content/sdk_developer_s_guide/sample_code.htm" Title="Sample Code" Abstract="Sample Code To help you use and understand the SDK, several examples of custom-built components are provided here, with embedded comments. You can build:" /><Url Source="../content/sdk_developer_s_guide/creating_transport.htm" Title="Creating a transport" Abstract="Creating a transport Transports are protocols used for getting data into the DigitalEdge system.  DigitalEdge comes with many built in user-configurable transport options including an S3 File Transport, TCP, UPD, and URL.  When a built in transport does not suffice, the DigitalEdge SDK helps you create a transport for specific needs.  Once written, custom transport classes are integrated with DigitalEdge and made available through the DigitalEdge setup tools (e.g., System Builder)." /><Url Source="../content/sdk_developer_s_guide/sample_transport_simple_local_file_transport_service_java.htm" Title="Sample transport" Abstract="SimpleLocalFileTransportService.java package &lt;your package&gt;;&#xA;&#xA;import java.io.BufferedReader;&#xA;import java.io.File;&#xA;import java.io.FileInputStream;&#xA;import java.io.InputStreamReader;&#xA;&#xA;import com.deleidos.rtws.core.framework.Description;&#xA;import com.deleidos.rtws.core.framework.UserConfigured;&#xA;import com.deleidos.rtws.transport.AbstractTransportService;&#xA;import com.deleidos.rtws.transport.TransportService;&#xA;&#xA;@Description(&quot;Simple example of a DigitalEdge TransportService that reads files &#xA; from a directory, reads the contents of the files,&quot; +&#xA; &quot; and pushes JMS messages into DigitalEdge&quot;)&#xA;public class SimpleLocalFileTransportService extends AbstractTransportService {&#xA;&#xA; private String watchedDirectory;&#xA; private DirWatcherRunner runner;&#xA; private int messagesSent = 0; &#xA; &#xA; public int getMessagesSent() {&#xA;  return messagesSent;&#xA; }&#xA;&#xA; @UserConfigured(value = &quot;/usr/local/data&quot;, description = &quot;The local directory to &#xA;  poll for data to &quot; + &quot;transmit into the system.&quot;, flexValidator = { &#xA;  &quot;StringValidator minLength=3 maxLength=63&quot; })&#xA; public void setWatchedDirectory(String val) {&#xA;  watchedDirectory = val;&#xA; }&#xA;&#xA; public String getWatchedDirectory() {&#xA;  return watchedDirectory;&#xA; }&#xA;&#xA; /**&#xA; * Start this Transport service.&#xA; * @see TransportService#execute()&#xA; */&#xA; @Override&#xA; public void execute() {&#xA;  runner = new DirWatcherRunner(watchedDirectory);&#xA;  Thread fileWatcher = new Thread(runner);&#xA;  try {&#xA;   fileWatcher.start();&#xA;  } catch (Exception e) {&#xA;   e.printStackTrace();&#xA;  }&#xA; }&#xA;&#xA; /**&#xA; * Close any open resources and stop the transport.&#xA; * @see TransportService#terminate()&#xA; */&#xA; @Override&#xA; public void terminate() {&#xA;  try {&#xA;   runner.setStop(true);&#xA;  } catch (Exception e) {&#xA;   e.printStackTrace();&#xA;  }&#xA; }&#xA;&#xA; /**&#xA; *  Runnable to read the file stream, split into lines, and send as a JMS message.&#xA; */&#xA; private class DirWatcherRunner implements Runnable {&#xA;&#xA;  private String watchedDirectory;&#xA;  private boolean stop = false;&#xA;&#xA;  public void setStop(boolean stop) {&#xA;   this.stop = stop;&#xA;  }&#xA;&#xA;  public DirWatcherRunner(String watchedDirectory) {&#xA;   this.watchedDirectory = watchedDirectory;&#xA;  }&#xA;&#xA;  public void run() {&#xA;   try {&#xA;    while (!stop) {&#xA;     File watchDir = new File(watchedDirectory);&#xA;     if (watchDir.isDirectory()) {&#xA;      for (File f: watchDir.listFiles()) {&#xA;       if (f.isFile()) {&#xA;        FileInputStream stream = new FileInputStream(f);&#xA;        BufferedReader reader = new BufferedReader(&#xA;         new InputStreamReader(stream, &quot;UTF-8&quot;));&#xA;        String record = reader.readLine();&#xA;        while (record != null) {&#xA;         // SendJMSMessage is the key method to push JMS &#xA;          messages into the system&#xA;         SendJMSMessage(record);&#xA;         messagesSent++;&#xA;         record = reader.readLine();&#xA;        }&#xA;        stream.close();&#xA;        //f.delete();&#xA;       }&#xA;      }&#xA;     }&#xA;    }&#xA;   } catch (Exception e) {&#xA;    e.printStackTrace();&#xA;   }&#xA;  }&#xA; }&#xA;&#xA;}" /><Url Source="../content/sdk_developer_s_guide/creating_parser.htm" Title="Creating a parser" Abstract="Creating a parser Parsers extract and translate data sources into key-value pairs that are mapped to your input model. DigitalEdge comes with many built in user-configurable parsers that work with data formats like CSV, CEF, email, EXIF, and JSON.  If you have a data source format that is not covered by the DigitalEdge parsers, you can use the SDK to write your own specific parser that can be plugged into the DigitalEdge framework and made available through the DigitalEdgesetup tools." /><Url Source="../content/sdk_developer_s_guide/sample_parser_simple_log_parser_java.htm" Title="Sample parser" Abstract="SimpleLogParser.java package &lt;your package&gt;;&#xA;&#xA;import java.text.ParseException;&#xA;import java.util.HashMap;&#xA;import java.util.regex.Matcher;&#xA;import java.util.regex.Pattern;&#xA;&#xA;import net.sf.json.JSONObject;&#xA;&#xA;import org.apache.log4j.Logger;&#xA;&#xA;import com.deleidos.rtws.core.framework.parser.AbstractLineParser;&#xA;&#xA;public class SimpleLogParser extends AbstractLineParser {&#xA;&#xA; private static final Logger log = Logger.getLogger(SimpleLogParser.class);&#xA; &#xA; //Timestamp format: &quot;YYYY-MM-DD HH:MM:SS&quot; or &quot;WWW MMM DD HH:MM:SS&quot; or &quot;MMM DD HH:MM:SS&quot; or &quot;DD/MMM/YYYY:HH:MM:SS&quot;&#xA; //or &quot;HH:MM:SS&quot;&#xA; protected static final String TIMESTAMP_REGEX = &#xA;  &quot;((([0-9]{1,2}/[A-z]{3}/[0-9]{4}:)|([0-9]{4}-[0-9]{2}-[0-9]{2} *)|(([A-z]{3} *)+[0-9]{1,2} ))&#xA;  *[0-9]{2}:[0-9]{2}:[0-9]{2})&quot;;&#xA; protected static final Pattern TIMESTAMP_PATTERN = Pattern.compile(TIMESTAMP_REGEX);&#xA; &#xA; protected String defaultSource;&#xA; &#xA; protected String defaultAccessLabel;&#xA; &#xA; public SimpleLogParser() {&#xA;  super(&quot;UTF-8&quot;);&#xA; }&#xA;&#xA; @Override&#xA; public void parseHeaders() {&#xA; }&#xA; &#xA; public JSONObject parse() {&#xA;  try {&#xA;   String input = nextRecord();&#xA;   if (input == null) return null;&#xA;   &#xA;   String streamAccessLabel = null; //info.getProperty(StandardHeader.ACCESS_LABEL_KEY);&#xA;   String accessLabel = (streamAccessLabel == null) ? defaultAccessLabel : streamAccessLabel;&#xA;   &#xA;   String streamSource = null; //info.getProperty(StandardHeader.SOURCE_KEY);&#xA;   String source = (streamSource == null) ? defaultSource : streamSource;&#xA;   HashMap&lt;String, String&gt; map = new HashMap&lt;String, String&gt;();&#xA;   Matcher m;&#xA;   &#xA;   //Step One: Process Timestamp&#xA;   m = TIMESTAMP_PATTERN.matcher(input);&#xA;   if(!m.find())&#xA;    throw new ParseException(&quot;No timestamp found.&quot;, -1);&#xA;   else&#xA;    map.put(&quot;TIMESTAMP&quot;, m.group());&#xA;    &#xA;   //Cut the timestamp out of the input so it doesn't get in the way&#xA;   input = input.replaceFirst(TIMESTAMP_REGEX, &quot;&quot;);&#xA;   &#xA;   //Step two: Process Message (the rest of the input)&#xA;   map.put(&quot;MESSAGE&quot;, input);&#xA;   &#xA;   JSONObject json = new JSONObject();&#xA;   json.element(&quot;TIMESTAMP&quot;, map.get(&quot;TIMESTAMP&quot;));&#xA;   json.element(&quot;MESSAGE&quot;, map.get(&quot;MESSAGE&quot;));&#xA;   return json;&#xA;   &#xA;  } catch (ParseException e) {&#xA;   log.error(&quot;Error parsing record in ConfigurableLogParser: &quot;, e);&#xA;   return null;&#xA;  }&#xA; }&#xA;}" /><Url Source="../content/sdk_developer_s_guide/creating_enrichment.htm" Title="Creating an enrichment" Abstract="Creating an enrichment Enrichments add to the data entering your system, utilizing methods such as enhancing data through calculations or mapping it to other data dimensions.  Enrichments can be chained, with one enrichment enhancing the output of a previous enrichment. Enrichments are data-specific  and must be developed specifically for your data.  This is not to say that enrichments cannot be used across different systems; but the data entering your system must have the correct fields and configuration for the enrichment to work.  Use the DigitalEdge SDK to write custom enrichments that can be plugged in to the DigitalEdge framework and made available through the DigitalEdge setup tools." /><Url Source="../content/sdk_developer_s_guide/sample_enrichment_simple_area_calculation_enrichment_java.htm" Title="Sample enrichment" Abstract="SimpleAreaCalculationEnrichment.java package &lt;your package&gt;;&#xA;&#xA;import net.sf.json.JSONObject;&#xA;&#xA;import com.deleidos.rtws.core.framework.processor.AbstractEnrichmentProcessor;&#xA;import com.deleidos.rtws.core.framework.processor.EnrichmentAction;&#xA;import com.deleidos.rtws.core.framework.processor.ParameterList;&#xA;&#xA;/**&#xA; * Extremely simple example Enrichment Processor&#xA; */&#xA;public class SimpleAreaCalculationEnrichment extends AbstractEnrichmentProcessor {&#xA;&#xA; @Override&#xA; public Object buildEnrichedElement(EnrichmentAction action, ParameterList parameters) {&#xA;  &#xA;  /* Asumming a json record such as&#xA;  {&#xA;      &quot;rectangle&quot;: {&#xA;          &quot;length&quot;: &quot;10&quot;,&#xA;          &quot;width&quot;: &quot;20&quot;&#xA;      }&#xA;  }&#xA;  This enrichment simply retrieves the length and width of the rectangle and calculates the area.&#xA;  The process of extracting the input parameters from and inserting the result back into the data &#xA;  record is handled by @see AbstractEnrichmentProcessor&#xA;  */&#xA;  &#xA;  JSONObject obj = action.getRootObject();&#xA;  Integer length = obj.getJSONObject(&quot;rectangle&quot;).getInt(&quot;length&quot;);&#xA;  Integer width = obj.getJSONObject(&quot;rectangle&quot;).getInt(&quot;width&quot;);&#xA;  Integer area = length * width;&#xA;  &#xA;  &#xA;  return area;&#xA; }&#xA;&#xA; @Override&#xA; public String getType() {&#xA;  return &quot;AreaCalculation&quot;;&#xA; }&#xA;&#xA;}" /><Url Source="../content/sdk_developer_s_guide/creating_data_sink.htm" Title="Creating a data sink" Abstract="Creating a data sink Data sinks receive pipeline-processed data for storage, alerting, or post-processing. DigitalEdge comes with many build-in user-configurable data sinks such as HBase, internal or external Hive, Lucene, MongoDB, and Alerting.  If the built-in data sinks do not meet your needs, use the DigitalEdge SDK to write a custom data sink that can be plugged into the DigitalEdge framework and made available through the DigitalEdge setup tools." /><Url Source="../content/sdk_developer_s_guide/sample_data_sink_json_file_data_sink_java.htm" Title="Sample data sink" Abstract="JsonFileDataSink.java package &lt;your package&gt;;&#xA;&#xA;import java.io.File;&#xA;import java.io.FileWriter;&#xA;import java.io.BufferedWriter;&#xA;import java.io.IOException;&#xA;&#xA;import net.sf.json.JSONObject;&#xA;&#xA;import com.deleidos.rtws.commons.exception.InitializationException;&#xA;import com.deleidos.rtws.core.framework.DataSink;&#xA;import com.deleidos.rtws.core.framework.Description;&#xA;&#xA;@Description(&quot;This is a data sink for an Json File Data Sink.&quot;)&#xA;public class JsonFileDataSink extends com.deleidos.rtws.core.framework.processor.AbstractDataSink implements DataSink {&#xA; &#xA; final private String DATA_SINK_FILE_PATH = &quot;/usr/local/etc&quot;;  // Location of the Data Sink File&#xA; final private String DATA_SINK_FILE = &quot;datasinkFile.txt&quot;;  // Data Sink File name&#xA; private BufferedWriter dataSinkOut;     // A writer to the Data Sink File&#xA; &#xA; /** Constructor. */&#xA; public JsonFileDataSink() {&#xA;  super();&#xA; }&#xA; &#xA; /**&#xA;  * Perform disposal work for the data sink.&#xA;  * &#xA;  * In our case, this means closing the Data Sink File.&#xA;  */&#xA; public void dispose() {&#xA;  // Close Connection to Data Sink File&#xA;  try {&#xA;   System.out.println(&quot;DEBUG: About to close the data sink file&quot;);&#xA;   dataSinkOut.close();&#xA;   System.out.println(&quot;DEBUG: Data sink file successfully closed&quot;);&#xA;  } catch (IOException e) {&#xA;   System.out.println(&quot;ERROR: Data sink file failed to close: &quot; + e.getMessage());&#xA;  }&#xA;  &#xA;  return;&#xA; }&#xA;&#xA; /**&#xA;  * Perform initialization work for the data sink.&#xA;  * &#xA;  * In our case, we need to make sure the Data Sink File path exists&#xA;  * and then open the file.  If an error occurs with either of these&#xA;  * we have failed to initialize and therefore need to throw an&#xA;  * InitializationException.&#xA;  * &#xA;  * @throws InitializationException Could throw an InitializationException&#xA;  */&#xA; public void initialize() throws InitializationException {&#xA;  &#xA;  // Make sure the file path exists&#xA;  if(!(new File(DATA_SINK_FILE_PATH).exists())) {&#xA;   // The file path does not exist so we must create it.&#xA;   System.out.println(&quot;DEBUG: &quot; + DATA_SINK_FILE_PATH + &quot; does not exist. Creating directories&quot;);&#xA;   if(!new File(DATA_SINK_FILE_PATH).mkdirs()) {&#xA;    // The path failed to be created so throw an InitializationException&#xA;    throw new InitializationException(DATA_SINK_FILE_PATH + &quot; was not successfully created&quot;);&#xA;   }&#xA;   System.out.println(&quot;DEBUG: &quot; + DATA_SINK_FILE_PATH + &quot; successfully created&quot;);&#xA;  }&#xA;  else {&#xA;   // The file path exists, continue on&#xA;   System.out.println(&quot;DEBUG: &quot; + DATA_SINK_FILE_PATH + &quot; exists&quot;);&#xA;  }&#xA;  &#xA;  // Open the connection to Data Sink File&#xA;  try {&#xA;   System.out.println(&quot;DEBUG: About to open the data sink file&quot;);&#xA;   dataSinkOut = new BufferedWriter(new FileWriter(DATA_SINK_FILE_PATH + DATA_SINK_FILE));&#xA;   System.out.println(&quot;DEBUG: Data sink file successfully opened&quot;);&#xA;  } catch (IOException e) {&#xA;   // File failed to open so throw an InitializationException&#xA;   throw new InitializationException(&quot;Data sink file failed to open: &quot; + e.getMessage(), e);&#xA;  }&#xA;  &#xA;  return;&#xA; }&#xA; &#xA; /**&#xA;  * Process the record to be stored in the data sink.&#xA;  * &#xA;  * In our case, this means converting the record into text format for the&#xA;  * Data Sink File.&#xA;  */&#xA; protected void processInternal(JSONObject record, FlushCounter counter) {&#xA;  // We want to count the record as received.  AbstractData sink has a&#xA;  // FlushCounter in it which counts both the number of records received&#xA;  // as well as the number of bytes received.  This is useful when using&#xA;  // data sinks which require caching before flushing to the data sink.&#xA;  // In our case, we do not cache the records before flushing to the&#xA;  // data sink, but we can still track the amount received.&#xA;  counter.increment(1, record.toString().length());&#xA;&#xA;  // Write the record directly to the Data Sink File&#xA;  try {&#xA;   System.out.println(&quot;DEBUG: About to write record \&quot;&quot; + record.toString() + &quot;\&quot; to data sink file&quot;);&#xA;   dataSinkOut.write(record.toString() + &quot;&quot;);&#xA;   System.out.println(&quot;DEBUG: Record successfully written to data sink file&quot;);&#xA;  } catch (IOException e) {&#xA;   // Writing to file failed so log the error&#xA;   System.out.println(&quot;ERROR: Failed to write record to data sink file: &quot; + e.getMessage());&#xA;  }&#xA; }&#xA;&#xA; /**&#xA;  * Perform flush for the data sink.&#xA;  */&#xA; public void flush() {&#xA;  // In our case, there is no caching to flush.&#xA;  &#xA;  // A data sink can be configured to flush based on any combination&#xA;  // of the number of records between flushes, number of&#xA;  // bytes between flushes, or amount of time(ms) between flushes.&#xA;  // If none of these are configured, the flush must be called explicitly.&#xA;  System.out.println(&quot;DEBUG: Data sink flush() called erroneously&quot;);&#xA; }&#xA;&#xA;}" /><Url Source="../content/sdk_developer_s_guide/sample_data_sink_json_file_data_sink_test_java.htm" Title="Sample data sink test" Abstract="JsonFileDataSinkTest.java package &lt;your package&gt;;&#xA;&#xA;import java.io.BufferedReader;&#xA;import java.io.FileReader;&#xA;import junit.framework.TestCase;&#xA;import net.sf.json.JSONObject;&#xA;import net.sf.json.JSONSerializer;&#xA;import org.junit.After;&#xA;import org.junit.Before;&#xA;import org.junit.Test;&#xA;import com.deleidos.rtws.commons.exception.InitializationException;&#xA;&#xA;/**&#xA; * A driver class for testing the JsonDataSink.&#xA; * &#xA; * The class is in the proper format to be run as a JUnit test.&#xA; */&#xA;public class JsonFileDataSinkTest extends TestCase {&#xA; &#xA; private static JsonFileDataSink dataSink = new JsonFileDataSink(); // An instance of the data sink&#xA; private String baseDir;       // A string to the user's base directory&#xA; private boolean safeToTest = false;   // A flag to determine whether the test is safe to run&#xA; &#xA; /**&#xA;  * Ran to clean up after the JUnit test.  In this example, we wnat to dispose of the data sink&#xA;  */&#xA; @After&#xA; public void cleanUp() {&#xA;  // Clean up the data sink&#xA;  dataSink.dispose();&#xA; }&#xA; &#xA; /**&#xA;  * Ran to set up before the JUnit test.  In this example, we need to choose the find the&#xA;  * base directory since that is where we have the input data file stored.  In addition,&#xA;  * we need to initialize the data sink.&#xA;  */&#xA; @Before&#xA; public void setUp() {  &#xA;  // Get the user's base directory&#xA;  if (System.getProperty(&quot;basedir&quot;) == null) {&#xA;   System.setProperty(&quot;basedir&quot;, System.getProperty(&quot;user.dir&quot;));&#xA;  }&#xA;  &#xA;  baseDir = System.getProperty(&quot;basedir&quot;);&#xA;  &#xA;  if (baseDir == null) {&#xA;   System.out.println(&quot;ERROR: Need to set basedir in system properties at startup time&quot;);&#xA;  }&#xA;  else {&#xA;   baseDir = System.getProperty(&quot;user.dir&quot;);&#xA;  }&#xA;  System.out.println(&quot;INFO: baseDir = &quot; + baseDir);&#xA;  &#xA;  // Initialize the data sink&#xA;  try {&#xA;   System.out.println(&quot;INFO: Initializing data sink&quot;); &#xA;   dataSink.initialize();&#xA;   safeToTest = true;&#xA;   System.out.println(&quot;INFO: Data sink successfully initialized&quot;);&#xA;  }&#xA;  catch(InitializationException e) {&#xA;   // The data sink failed to initialize, flag that we do&#xA;   // not want to continue testing&#xA;   safeToTest = false;&#xA;   System.out.println(&quot;ERROR: &quot; + e.getMessage());&#xA;  }  &#xA; }&#xA; &#xA; @Test&#xA; public void testProcessInternal() throws Exception {&#xA;  // Check if the test is safe to run or if the data sink failed to initialize&#xA;  if(safeToTest) {&#xA;   BufferedReader testDataIn = null;&#xA;   &#xA;   try {&#xA;    // Open the file to read the input data from.  This file&#xA;    // is just text file with a JSON string on each line.&#xA;    System.out.println(&quot;INFO: new dir:&quot;);&#xA;    testDataIn = new BufferedReader(new FileReader(baseDir&#xA;      + &quot;/src/resource/test.json&quot;));&#xA; &#xA;    // Work through the file reading each line of text&#xA;    String line;&#xA;    while ((line = testDataIn.readLine()) != null) {&#xA;     // Convert each line of text into a JSONObject record&#xA;     JSONObject record = (JSONObject) JSONSerializer.toJSON(line);&#xA;     System.out.println(&quot;INFO: Read record \&quot;&quot; + record + &quot;\&quot;&quot;);&#xA;     &#xA;     // Process the the record. Notice here that we do not call the &#xA;     // processInternal(JSONObject record, FlushCounter counter) function&#xA;     // of the Data Sink.  Instead we just call process(JSONObject record)&#xA;     // function.  That is because the processInternal is only used internally&#xA;     // by the data sink in conjunction with the data sink's FlushCounter.&#xA;     dataSink.process(record);&#xA;     System.out.println(&quot;INFO: Record written to data sink&quot;);&#xA;    }&#xA;   } finally {&#xA;    // Close the test data file&#xA;    testDataIn.close();&#xA;   }&#xA;  }&#xA;  else {&#xA;   // Log that the test did not run&#xA;   System.out.println(&quot;INFO: testProcessInternal did not run since data sink failed to &#xA;     initialize&quot;);   &#xA;  }&#xA; }&#xA;}" /><Url Source="../content/sdk_developer_s_guide/how_to_run_the_samples.htm" Title="How to Run the Samples" Abstract="How to Run the Samples To facilitate the development of custom plug-ins, Apache Maven™ archetypes are available for download and use.  These archetypes should be used as the starting point for any custom plug-ins, as they provide a complete build environment for development. To use and run these samples, follow these steps:" /><Url Source="../content/sdk_developer_s_guide/programming_and_testing_environment.htm" Title="Programming and Testing Environment" Abstract="Programming and Testing Environment To test a component in-line with DigitalEdge, a plug-in must be installed with your system. Currently, transports, parsers, and enrichments can be uploaded to the repository with the Plug-ins feature of DigitalEdge's Management Console and accessed via System Builder to assemble a  processing pipeline. See the Operations Guide for details." /><Url Source="../content/sdk_developer_s_guide/tips_and_tricks.htm" Title="Tips and tricks" Abstract="Tips and tricks " /><Url Source="../content/front_online_disclaimer_acknowledgements.htm" Title="Terms of Use" Abstract="DISCLAIMER OF WARRANTY AND LIMITATION OF LIABILITY The Software accompanying this Documentation is provided with the Limited Warranty contained in the License Agreement for that Software. Leidos, its affiliates and suppliers, disclaim all warranties that the Software will perform as expected or desired on any machine or in any environment. Leidos, its affiliates and suppliers, further disclaim any warranties that this Documentation is complete, accurate, or error-free. Both the Software and the Documentation are subject to updates or changes at Leidos’ sole discretion. LEIDOS, ITS LICENSORS AND SUPPLIERS MAKE NO OTHER WARRANTIES, WRITTEN OR ORAL, EXPRESS OR IMPLIED RELATING TO THE PRODUCTS, SOFTWARE, AND DOCUMENTATION. LEIDOS, ITS LICENSORS AND SUPPLIERS DISCLAIM ALL IMPLIED WARRANTIES, INCLUDING WITHOUT LIMITATION ANY IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, USE, TITLE, AND NON-INFRINGEMENT OF THIRD PARTY RIGHTS. In no event shall Leidos, its affiliates or suppliers, be liable to the End User for any consequential, incidental, indirect, exemplary, punitive, or special damages (including lost profits, lost data, or cost of substitute goods or services) related to or arising out of the use of this Software and Documentation however caused and whether such damages are based in tort (including negligence), contract, or otherwise, and regardless of whether Leidos, its affiliates or suppliers, has been advised of the possibility of such damages in advance. TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAWS, END USER ACKNOWLEDGES AND AGREES THAT LEIDOS AND ITS AFFILIATES AND SUPPLIERS IN NO EVENT SHALL BE RESPONSIBLE OR LIABLE TO THE END USER FOR ANY AMOUNTS IN EXCESS OF THE FEES PAID BY THE END USER TO LEIDOS. LEIDOS SHALL NOT BE RESPONSIBLE FOR ANY MATTER BEYOND ITS REASONABLE CONTROL." /></urls><ents><stem n="welcom" chunk="Search_Chunk1.xml" /><stem n="digitaledg" chunk="Search_Chunk1.xml" /><stem n="™" chunk="Search_Chunk1.xml" /><stem n="version" chunk="Search_Chunk1.xml" /><stem n="1" chunk="Search_Chunk1.xml" /><stem n="3" chunk="Search_Chunk1.xml" /><stem n="sdk" chunk="Search_Chunk1.xml" /><stem n="help" chunk="Search_Chunk1.xml" /><stem n="introduct" chunk="Search_Chunk1.xml" /><stem n="ingest" chunk="Search_Chunk1.xml" /><stem n="pipelin" chunk="Search_Chunk1.xml" /><stem n="process" chunk="Search_Chunk1.xml" /><stem n="provid" chunk="Search_Chunk1.xml" /><stem n="api" chunk="Search_Chunk1.xml" /><stem n="easili" chunk="Search_Chunk1.xml" /><stem n="creat" chunk="Search_Chunk1.xml" /><stem n="custom" chunk="Search_Chunk1.xml" /><stem n="compon" chunk="Search_Chunk1.xml" /><stem n="s" chunk="Search_Chunk1.xml" /><stem n="consist" chunk="Search_Chunk1.xml" /><stem n="transport" chunk="Search_Chunk1.xml" /><stem n="protocol" chunk="Search_Chunk1.xml" /><stem n="us" chunk="Search_Chunk1.xml" /><stem n="get" chunk="Search_Chunk1.xml" /><stem n="data" chunk="Search_Chunk1.xml" /><stem n="parser" chunk="Search_Chunk1.xml" /><stem n="receiv" chunk="Search_Chunk1.xml" /><stem n="raw" chunk="Search_Chunk1.xml" /><stem n="pars" chunk="Search_Chunk1.xml" /><stem n="json" chunk="Search_Chunk1.xml" /><stem n="record" chunk="Search_Chunk1.xml" /><stem n="form" chunk="Search_Chunk2.xml" /><stem n="refer" chunk="Search_Chunk2.xml" /><stem n="canon" chunk="Search_Chunk2.xml" /><stem n="format" chunk="Search_Chunk2.xml" /><stem n="enrich" chunk="Search_Chunk2.xml" /><stem n="processor" chunk="Search_Chunk2.xml" /><stem n="databas" chunk="Search_Chunk2.xml" /><stem n="algorithm" chunk="Search_Chunk2.xml" /><stem n="produc" chunk="Search_Chunk2.xml" /><stem n="multi-dimension" chunk="Search_Chunk2.xml" /><stem n="multi" chunk="Search_Chunk2.xml" /><stem n="dimension" chunk="Search_Chunk2.xml" /><stem n="flatten" chunk="Search_Chunk2.xml" /><stem n="singl" chunk="Search_Chunk2.xml" /><stem n="sink" chunk="Search_Chunk2.xml" /><stem n="post" chunk="Search_Chunk2.xml" /><stem n="post-process" chunk="Search_Chunk2.xml" /><stem n="store" chunk="Search_Chunk2.xml" /><stem n="alert" chunk="Search_Chunk2.xml" /><stem n="product" chunk="Search_Chunk2.xml" /><stem n="document" chunk="Search_Chunk2.xml" /><stem n="type" chunk="Search_Chunk2.xml" /><stem n="complex" chunk="Search_Chunk2.xml" /><stem n="big" chunk="Search_Chunk2.xml" /><stem n="platform" chunk="Search_Chunk2.xml" /><stem n="system" chunk="Search_Chunk2.xml" /><stem n="come" chunk="Search_Chunk2.xml" /><stem n="complet" chunk="Search_Chunk2.xml" /><stem n="set" chunk="Search_Chunk2.xml" /><stem n="pdf" chunk="Search_Chunk2.xml" /><stem n="html5" chunk="Search_Chunk2.xml" /><stem n="master" chunk="Search_Chunk2.xml" /><stem n="audienc" chunk="Search_Chunk2.xml" /><stem n="overview" chunk="Search_Chunk2.xml" /><stem n="guid" chunk="Search_Chunk2.xml" /><stem n="basic" chunk="Search_Chunk2.xml" /><stem n="inform" chunk="Search_Chunk2.xml" /><stem n="includ" chunk="Search_Chunk2.xml" /><stem n="architectur" chunk="Search_Chunk2.xml" /><stem n="concept" chunk="Search_Chunk2.xml" /><stem n="terminolog" chunk="Search_Chunk2.xml" /><stem n="must-read" chunk="Search_Chunk2.xml" /><stem n="must" chunk="Search_Chunk2.xml" /><stem n="read" chunk="Search_Chunk2.xml" /><stem n="befor" chunk="Search_Chunk2.xml" /><stem n="work" chunk="Search_Chunk2.xml" /><stem n="ani" chunk="Search_Chunk2.xml" /><stem n="aspect" chunk="Search_Chunk2.xml" /><stem n="anyon" chunk="Search_Chunk2.xml" /><stem n="capac" chunk="Search_Chunk2.xml" /><stem n="configur" chunk="Search_Chunk2.xml" /><stem n="instruct" chunk="Search_Chunk2.xml" /><stem n="defin" chunk="Search_Chunk2.xml" /><stem n="model" chunk="Search_Chunk2.xml" /><stem n="build" chunk="Search_Chunk2.xml" /><stem n="specialist" chunk="Search_Chunk2.xml" /><stem n="administr" chunk="Search_Chunk2.xml" /><stem n="oper" chunk="Search_Chunk2.xml" /><stem n="daili" chunk="Search_Chunk2.xml" /><stem n="cover" chunk="Search_Chunk2.xml" /><stem n="monitor" chunk="Search_Chunk2.xml" /><stem n="manag" chunk="Search_Chunk2.xml" /><stem n="modifi" chunk="Search_Chunk2.xml" /><stem n="cookbook" chunk="Search_Chunk2.xml" /><stem n="guidelin" chunk="Search_Chunk2.xml" /><stem n="procedur" chunk="Search_Chunk2.xml" /><stem n="common" chunk="Search_Chunk2.xml" /><stem n="task" chunk="Search_Chunk2.xml" /><stem n="plug-in" chunk="Search_Chunk2.xml" /><stem n="plug" chunk="Search_Chunk2.xml" /><stem n="develop" chunk="Search_Chunk2.xml" /><stem n="specifi" chunk="Search_Chunk2.xml" /><stem n="trigger" chunk="Search_Chunk2.xml" /><stem n="notif" chunk="Search_Chunk2.xml" /><stem n="capabl" chunk="Search_Chunk2.xml" /><stem n="search" chunk="Search_Chunk3.xml" /><stem n="servic" chunk="Search_Chunk3.xml" /><stem n="lucen" chunk="Search_Chunk3.xml" /><stem n="node" chunk="Search_Chunk3.xml" /><stem n="typograph" chunk="Search_Chunk3.xml" /><stem n="convent" chunk="Search_Chunk3.xml" /><stem n="style" chunk="Search_Chunk3.xml" /><stem n="standard" chunk="Search_Chunk3.xml" /><stem n="follow" chunk="Search_Chunk3.xml" /><stem n="throughout" chunk="Search_Chunk3.xml" /><stem n="code" chunk="Search_Chunk3.xml" /><stem n="command" chunk="Search_Chunk3.xml" /><stem n="filenam" chunk="Search_Chunk3.xml" /><stem n="cross" chunk="Search_Chunk3.xml" /><stem n="click" chunk="Search_Chunk3.xml" /><stem n="see" chunk="Search_Chunk3.xml" /><stem n="topic" chunk="Search_Chunk3.xml" /><stem n="emphasi" chunk="Search_Chunk3.xml" /><stem n="import" chunk="Search_Chunk3.xml" /><stem n="point" chunk="Search_Chunk3.xml" /><stem n="hyperlink" chunk="Search_Chunk3.xml" /><stem n="go" chunk="Search_Chunk3.xml" /><stem n="site" chunk="Search_Chunk3.xml" /><stem n="note" chunk="Search_Chunk3.xml" /><stem n="warn" chunk="Search_Chunk3.xml" /><stem n="tip" chunk="Search_Chunk3.xml" /><stem n="titl" chunk="Search_Chunk3.xml" /><stem n="sampl" chunk="Search_Chunk3.xml" /><stem n="block" chunk="Search_Chunk3.xml" /><stem n="troubleshoot" chunk="Search_Chunk3.xml" /><stem n="issu" chunk="Search_Chunk3.xml" /><stem n="problem" chunk="Search_Chunk3.xml" /><stem n="solut" chunk="Search_Chunk3.xml" /><stem n="user" chunk="Search_Chunk3.xml" /><stem n="input" chunk="Search_Chunk3.xml" /><stem n="ital" chunk="Search_Chunk3.xml" /><stem n="interfac" chunk="Search_Chunk3.xml" /><stem n="label" chunk="Search_Chunk3.xml" /><stem n="control" chunk="Search_Chunk3.xml" /><stem n="bold" chunk="Search_Chunk3.xml" /><stem n="variabl" chunk="Search_Chunk3.xml" /><stem n="&lt;" chunk="Search_Chunk3.xml" /><stem n="change-this-nam" chunk="Search_Chunk3.xml" /><stem n="chang" chunk="Search_Chunk3.xml" /><stem n="change-thi" chunk="Search_Chunk3.xml" /><stem n="this-nam" chunk="Search_Chunk3.xml" /><stem n="name" chunk="Search_Chunk3.xml" /><stem n="&gt;" chunk="Search_Chunk3.xml" /><stem n="what" chunk="Search_Chunk3.xml" /><stem n="content" chunk="Search_Chunk3.xml" /><stem n="java" chunk="Search_Chunk3.xml" /><stem n="librari" chunk="Search_Chunk3.xml" /><stem n="requir" chunk="Search_Chunk3.xml" /><stem n="javadoc" chunk="Search_Chunk3.xml" /><stem n="simplelocalfiletransportservic" chunk="Search_Chunk3.xml" /><stem n="simplelogpars" chunk="Search_Chunk3.xml" /><stem n="simpleareacalculationenrich" chunk="Search_Chunk3.xml" /><stem n="jsonfiledatasink" chunk="Search_Chunk3.xml" /><stem n="test" chunk="Search_Chunk3.xml" /><stem n="driver" chunk="Search_Chunk3.xml" /><stem n="jsonfiledatasinktest" chunk="Search_Chunk3.xml" /><stem n="file" chunk="Search_Chunk3.xml" /><stem n="exampl" chunk="Search_Chunk3.xml" /><stem n="understand" chunk="Search_Chunk3.xml" /><stem n="custom-built" chunk="Search_Chunk3.xml" /><stem n="built" chunk="Search_Chunk3.xml" /><stem n="here" chunk="Search_Chunk3.xml" /><stem n="embed" chunk="Search_Chunk3.xml" /><stem n="comment" chunk="Search_Chunk3.xml" /><stem n="method" chunk="Search_Chunk3.xml" /><stem n="user-configur" chunk="Search_Chunk3.xml" /><stem n="option" chunk="Search_Chunk3.xml" /><stem n="s3" chunk="Search_Chunk3.xml" /><stem n="tcp" chunk="Search_Chunk3.xml" /><stem n="upd" chunk="Search_Chunk3.xml" /><stem n="url" chunk="Search_Chunk3.xml" /><stem n="doe" chunk="Search_Chunk3.xml" /><stem n="suffic" chunk="Search_Chunk3.xml" /><stem n="specif" chunk="Search_Chunk3.xml" /><stem n="need" chunk="Search_Chunk3.xml" /><stem n="onc" chunk="Search_Chunk4.xml" /><stem n="written" chunk="Search_Chunk4.xml" /><stem n="class" chunk="Search_Chunk4.xml" /><stem n="integr" chunk="Search_Chunk4.xml" /><stem n="avail" chunk="Search_Chunk4.xml" /><stem n="setup" chunk="Search_Chunk4.xml" /><stem n="tool" chunk="Search_Chunk4.xml" /><stem n="e" chunk="Search_Chunk4.xml" /><stem n="g" chunk="Search_Chunk4.xml" /><stem n="builder" chunk="Search_Chunk4.xml" /><stem n="write" chunk="Search_Chunk4.xml" /><stem n="implement" chunk="Search_Chunk4.xml" /><stem n="com" chunk="Search_Chunk4.xml" /><stem n="deleido" chunk="Search_Chunk4.xml" /><stem n="rtw" chunk="Search_Chunk4.xml" /><stem n="transportservic" chunk="Search_Chunk4.xml" /><stem n="util" chunk="Search_Chunk4.xml" /><stem n="initializ" chunk="Search_Chunk4.xml" /><stem n="extend" chunk="Search_Chunk4.xml" /><stem n="detail" chunk="Search_Chunk4.xml" /><stem n="kei" chunk="Search_Chunk4.xml" /><stem n="execut" chunk="Search_Chunk4.xml" /><stem n="retriev" chunk="Search_Chunk4.xml" /><stem n="sourc" chunk="Search_Chunk4.xml" /><stem n="pre-process" chunk="Search_Chunk4.xml" /><stem n="pre" chunk="Search_Chunk4.xml" /><stem n="if" chunk="Search_Chunk4.xml" /><stem n="forward" chunk="Search_Chunk4.xml" /><stem n="should" chunk="Search_Chunk4.xml" /><stem n="continu" chunk="Search_Chunk4.xml" /><stem n="loop" chunk="Search_Chunk4.xml" /><stem n="termin" chunk="Search_Chunk4.xml" /><stem n="call" chunk="Search_Chunk4.xml" /><stem n="notifi" chunk="Search_Chunk4.xml" /><stem n="exit" chunk="Search_Chunk4.xml" /><stem n="initi" chunk="Search_Chunk4.xml" /><stem n="connect" chunk="Search_Chunk4.xml" /><stem n="datasourc" chunk="Search_Chunk4.xml" /><stem n="resourc" chunk="Search_Chunk4.xml" /><stem n="etc" chunk="Search_Chunk4.xml" /><stem n="dispos" chunk="Search_Chunk4.xml" /><stem n="clean" chunk="Search_Chunk4.xml" /><stem n="up" chunk="Search_Chunk4.xml" /><stem n="abstracttransportservic" chunk="Search_Chunk4.xml" /><stem n="conveni" chunk="Search_Chunk4.xml" /><stem n="send" chunk="Search_Chunk4.xml" /><stem n="jm" chunk="Search_Chunk4.xml" /><stem n="messag" chunk="Search_Chunk4.xml" /><stem n="paramet" chunk="Search_Chunk4.xml" /><stem n="userconfigur" chunk="Search_Chunk4.xml" /><stem n="annot" chunk="Search_Chunk4.xml" /><stem n="core" chunk="Search_Chunk4.xml" /><stem n="framework" chunk="Search_Chunk4.xml" /><stem n="setter" chunk="Search_Chunk4.xml" /><stem n="properti" chunk="Search_Chunk4.xml" /><stem n="will" chunk="Search_Chunk4.xml" /><stem n="displai" chunk="Search_Chunk4.xml" /><stem n="field" chunk="Search_Chunk4.xml" /><stem n="packag" chunk="Search_Chunk4.xml" /><stem n="&lt;your" chunk="Search_Chunk4.xml" /><stem n="package&gt;" chunk="Search_Chunk4.xml" /><stem n="io" chunk="Search_Chunk4.xml" /><stem n="bufferedread" chunk="Search_Chunk4.xml" /><stem n="fileinputstream" chunk="Search_Chunk4.xml" /><stem n="inputstreamread" chunk="Search_Chunk4.xml" /><stem n="descript" chunk="Search_Chunk4.xml" /><stem n="simpl" chunk="Search_Chunk4.xml" /><stem n="directori" chunk="Search_Chunk4.xml" /><stem n="+" chunk="Search_Chunk4.xml" /><stem n="push" chunk="Search_Chunk5.xml" /><stem n="public" chunk="Search_Chunk5.xml" /><stem n="privat" chunk="Search_Chunk5.xml" /><stem n="string" chunk="Search_Chunk5.xml" /><stem n="watcheddirectori" chunk="Search_Chunk5.xml" /><stem n="dirwatcherrunn" chunk="Search_Chunk5.xml" /><stem n="runner" chunk="Search_Chunk5.xml" /><stem n="int" chunk="Search_Chunk5.xml" /><stem n="messagess" chunk="Search_Chunk5.xml" /><stem n="0" chunk="Search_Chunk5.xml" /><stem n="getmessagess" chunk="Search_Chunk5.xml" /><stem n="return" chunk="Search_Chunk5.xml" /><stem n="valu" chunk="Search_Chunk5.xml" /><stem n="usr" chunk="Search_Chunk5.xml" /><stem n="local" chunk="Search_Chunk5.xml" /><stem n="poll" chunk="Search_Chunk5.xml" /><stem n="transmit" chunk="Search_Chunk5.xml" /><stem n="flexvalid" chunk="Search_Chunk5.xml" /><stem n="stringvalid" chunk="Search_Chunk5.xml" /><stem n="minlength" chunk="Search_Chunk5.xml" /><stem n="maxlength" chunk="Search_Chunk5.xml" /><stem n="63" chunk="Search_Chunk5.xml" /><stem n="void" chunk="Search_Chunk5.xml" /><stem n="setwatcheddirectori" chunk="Search_Chunk5.xml" /><stem n="val" chunk="Search_Chunk5.xml" /><stem n="getwatcheddirectori" chunk="Search_Chunk5.xml" /><stem n="start" chunk="Search_Chunk5.xml" /><stem n="overrid" chunk="Search_Chunk5.xml" /><stem n="new" chunk="Search_Chunk5.xml" /><stem n="thread" chunk="Search_Chunk5.xml" /><stem n="filewatch" chunk="Search_Chunk5.xml" /><stem n="try" chunk="Search_Chunk5.xml" /><stem n="catch" chunk="Search_Chunk5.xml" /><stem n="except" chunk="Search_Chunk5.xml" /><stem n="printstacktrac" chunk="Search_Chunk5.xml" /><stem n="close" chunk="Search_Chunk5.xml" /><stem n="open" chunk="Search_Chunk5.xml" /><stem n="stop" chunk="Search_Chunk5.xml" /><stem n="setstop" chunk="Search_Chunk5.xml" /><stem n="true" chunk="Search_Chunk5.xml" /><stem n="runnabl" chunk="Search_Chunk5.xml" /><stem n="stream" chunk="Search_Chunk5.xml" /><stem n="split" chunk="Search_Chunk5.xml" /><stem n="line" chunk="Search_Chunk5.xml" /><stem n="boolean" chunk="Search_Chunk5.xml" /><stem n="fals" chunk="Search_Chunk5.xml" /><stem n="run" chunk="Search_Chunk5.xml" /><stem n="while" chunk="Search_Chunk5.xml" /><stem n="watchdir" chunk="Search_Chunk5.xml" /><stem n="isdirectori" chunk="Search_Chunk5.xml" /><stem n="f" chunk="Search_Chunk5.xml" /><stem n="listfil" chunk="Search_Chunk5.xml" /><stem n="isfil" chunk="Search_Chunk5.xml" /><stem n="reader" chunk="Search_Chunk5.xml" /><stem n="utf" chunk="Search_Chunk5.xml" /><stem n="utf-8" chunk="Search_Chunk5.xml" /><stem n="8" chunk="Search_Chunk5.xml" /><stem n="readlin" chunk="Search_Chunk5.xml" /><stem n="null" chunk="Search_Chunk5.xml" /><stem n="sendjmsmessag" chunk="Search_Chunk5.xml" /><stem n="messagessent++" chunk="Search_Chunk5.xml" /><stem n="delet" chunk="Search_Chunk5.xml" /><stem n="extract" chunk="Search_Chunk5.xml" /><stem n="translat" chunk="Search_Chunk5.xml" /><stem n="key-valu" chunk="Search_Chunk5.xml" /><stem n="pair" chunk="Search_Chunk5.xml" /><stem n="map" chunk="Search_Chunk5.xml" /><stem n="like" chunk="Search_Chunk5.xml" /><stem n="csv" chunk="Search_Chunk5.xml" /><stem n="cef" chunk="Search_Chunk5.xml" /><stem n="email" chunk="Search_Chunk5.xml" /><stem n="exif" chunk="Search_Chunk5.xml" /><stem n="own" chunk="Search_Chunk5.xml" /><stem n="describ" chunk="Search_Chunk5.xml" /><stem n="below" chunk="Search_Chunk5.xml" /><stem n="clone" chunk="Search_Chunk5.xml" /><stem n="copi" chunk="Search_Chunk5.xml" /><stem n="incom" chunk="Search_Chunk5.xml" /><stem n="jsonobject" chunk="Search_Chunk5.xml" /><stem n="contain" chunk="Search_Chunk5.xml" /><stem n="logic" chunk="Search_Chunk5.xml" /><stem n="parsehead" chunk="Search_Chunk5.xml" /><stem n="header" chunk="Search_Chunk5.xml" /><stem n="setinputstream" chunk="Search_Chunk5.xml" /><stem n="inputstream" chunk="Search_Chunk5.xml" /><stem n="associ" chunk="Search_Chunk5.xml" /><stem n="pass" chunk="Search_Chunk5.xml" /><stem n="argument" chunk="Search_Chunk5.xml" /><stem n="setstreamproperti" chunk="Search_Chunk5.xml" /><stem n="save" chunk="Search_Chunk5.xml" /><stem n="abstract" chunk="Search_Chunk5.xml" /><stem n="partial" chunk="Search_Chunk5.xml" /><stem n="recommend" chunk="Search_Chunk5.xml" /><stem n="abstractbufferingpars" chunk="Search_Chunk5.xml" /><stem n="base" chunk="Search_Chunk5.xml" /><stem n="want" chunk="Search_Chunk5.xml" /><stem n="on" chunk="Search_Chunk5.xml" /><stem n="output" chunk="Search_Chunk5.xml" /><stem n="two" chunk="Search_Chunk5.xml" /><stem n="abstractlinepars" chunk="Search_Chunk5.xml" /><stem n="interpret" chunk="Search_Chunk5.xml" /><stem n="text" chunk="Search_Chunk5.xml" /><stem n="assum" chunk="Search_Chunk5.xml" /><stem n="time" chunk="Search_Chunk6.xml" /><stem n="well" chunk="Search_Chunk6.xml" /><stem n="delimit" chunk="Search_Chunk6.xml" /><stem n="abstractxmlpars" chunk="Search_Chunk6.xml" /><stem n="xml" chunk="Search_Chunk6.xml" /><stem n="parseexcept" chunk="Search_Chunk6.xml" /><stem n="hashmap" chunk="Search_Chunk6.xml" /><stem n="regex" chunk="Search_Chunk6.xml" /><stem n="matcher" chunk="Search_Chunk6.xml" /><stem n="pattern" chunk="Search_Chunk6.xml" /><stem n="net" chunk="Search_Chunk6.xml" /><stem n="sf" chunk="Search_Chunk6.xml" /><stem n="org" chunk="Search_Chunk6.xml" /><stem n="apach" chunk="Search_Chunk6.xml" /><stem n="log4j" chunk="Search_Chunk6.xml" /><stem n="logger" chunk="Search_Chunk6.xml" /><stem n="static" chunk="Search_Chunk6.xml" /><stem n="final" chunk="Search_Chunk6.xml" /><stem n="log" chunk="Search_Chunk6.xml" /><stem n="getlogg" chunk="Search_Chunk6.xml" /><stem n="timestamp" chunk="Search_Chunk6.xml" /><stem n="yyyy-mm-dd" chunk="Search_Chunk6.xml" /><stem n="yyyi" chunk="Search_Chunk6.xml" /><stem n="yyyy-mm" chunk="Search_Chunk6.xml" /><stem n="mm" chunk="Search_Chunk6.xml" /><stem n="mm-dd" chunk="Search_Chunk6.xml" /><stem n="dd" chunk="Search_Chunk6.xml" /><stem n="hh" chunk="Search_Chunk6.xml" /><stem n="ss" chunk="Search_Chunk6.xml" /><stem n="www" chunk="Search_Chunk6.xml" /><stem n="mmm" chunk="Search_Chunk6.xml" /><stem n="protect" chunk="Search_Chunk6.xml" /><stem n="timestamp_regex" chunk="Search_Chunk6.xml" /><stem n="0-9" chunk="Search_Chunk6.xml" /><stem n="9" chunk="Search_Chunk6.xml" /><stem n="2" chunk="Search_Chunk6.xml" /><stem n="a-z" chunk="Search_Chunk6.xml" /><stem n="z" chunk="Search_Chunk6.xml" /><stem n="4" chunk="Search_Chunk6.xml" /><stem n="|" chunk="Search_Chunk6.xml" /><stem n="timestamp_pattern" chunk="Search_Chunk6.xml" /><stem n="compil" chunk="Search_Chunk6.xml" /><stem n="defaultsourc" chunk="Search_Chunk6.xml" /><stem n="defaultaccesslabel" chunk="Search_Chunk6.xml" /><stem n="super" chunk="Search_Chunk6.xml" /><stem n="nextrecord" chunk="Search_Chunk6.xml" /><stem n="streamaccesslabel" chunk="Search_Chunk6.xml" /><stem n="info" chunk="Search_Chunk6.xml" /><stem n="getproperti" chunk="Search_Chunk6.xml" /><stem n="standardhead" chunk="Search_Chunk6.xml" /><stem n="access_label_kei" chunk="Search_Chunk6.xml" /><stem n="accesslabel" chunk="Search_Chunk6.xml" /><stem n="streamsourc" chunk="Search_Chunk6.xml" /><stem n="source_kei" chunk="Search_Chunk6.xml" /><stem n="hashmap&lt;str" chunk="Search_Chunk6.xml" /><stem n="string&gt;" chunk="Search_Chunk6.xml" /><stem n="m" chunk="Search_Chunk6.xml" /><stem n="step" chunk="Search_Chunk6.xml" /><stem n="find" chunk="Search_Chunk6.xml" /><stem n="throw" chunk="Search_Chunk6.xml" /><stem n="-1);" chunk="Search_Chunk6.xml" /><stem n="els" chunk="Search_Chunk6.xml" /><stem n="put" chunk="Search_Chunk6.xml" /><stem n="group" chunk="Search_Chunk6.xml" /><stem n="cut" chunk="Search_Chunk6.xml" /><stem n="out" chunk="Search_Chunk6.xml" /><stem n="so" chunk="Search_Chunk6.xml" /><stem n="doesn" chunk="Search_Chunk6.xml" /><stem n="t" chunk="Search_Chunk6.xml" /><stem n="wai" chunk="Search_Chunk6.xml" /><stem n="replacefirst" chunk="Search_Chunk6.xml" /><stem n="rest" chunk="Search_Chunk6.xml" /><stem n="element" chunk="Search_Chunk6.xml" /><stem n="error" chunk="Search_Chunk6.xml" /><stem n="configurablelogpars" chunk="Search_Chunk6.xml" /><stem n="add" chunk="Search_Chunk6.xml" /><stem n="enter" chunk="Search_Chunk6.xml" /><stem n="enhanc" chunk="Search_Chunk6.xml" /><stem n="calcul" chunk="Search_Chunk6.xml" /><stem n="dimens" chunk="Search_Chunk6.xml" /><stem n="chain" chunk="Search_Chunk6.xml" /><stem n="previou" chunk="Search_Chunk6.xml" /><stem n="data-specif" chunk="Search_Chunk6.xml" /><stem n="sai" chunk="Search_Chunk6.xml" /><stem n="cannot" chunk="Search_Chunk6.xml" /><stem n="across" chunk="Search_Chunk6.xml" /><stem n="differ" chunk="Search_Chunk6.xml" /><stem n="correct" chunk="Search_Chunk6.xml" /><stem n="abstractenrichmentprocessor" chunk="Search_Chunk6.xml" /><stem n="buildenrichedel" chunk="Search_Chunk6.xml" /><stem n="workhors" chunk="Search_Chunk6.xml" /><stem n="perform" chunk="Search_Chunk6.xml" /><stem n="actual" chunk="Search_Chunk6.xml" /><stem n="lang" chunk="Search_Chunk6.xml" /><stem n="object" chunk="Search_Chunk6.xml" /><stem n="take" chunk="Search_Chunk6.xml" /><stem n="handl" chunk="Search_Chunk6.xml" /><stem n="insert" chunk="Search_Chunk6.xml" /><stem n="back" chunk="Search_Chunk6.xml" /><stem n="gettyp" chunk="Search_Chunk6.xml" /><stem n="declar" chunk="Search_Chunk6.xml" /><stem n="simpli" chunk="Search_Chunk6.xml" /><stem n="i" chunk="Search_Chunk6.xml" /><stem n="noopenrich" chunk="Search_Chunk6.xml" /><stem n="would" chunk="Search_Chunk6.xml" /><stem n="noop" chunk="Search_Chunk6.xml" /><stem n="outlin" chunk="Search_Chunk6.xml" /><stem n="enrichmentact" chunk="Search_Chunk6.xml" /><stem n="parameterlist" chunk="Search_Chunk6.xml" /><stem n="extrem" chunk="Search_Chunk6.xml" /><stem n="action" chunk="Search_Chunk6.xml" /><stem n="asum" chunk="Search_Chunk6.xml" /><stem n="rectangl" chunk="Search_Chunk6.xml" /><stem n="length" chunk="Search_Chunk6.xml" /><stem n="10" chunk="Search_Chunk6.xml" /><stem n="width" chunk="Search_Chunk6.xml" /><stem n="20" chunk="Search_Chunk6.xml" /><stem n="area" chunk="Search_Chunk6.xml" /><stem n="result" chunk="Search_Chunk6.xml" /><stem n="obj" chunk="Search_Chunk6.xml" /><stem n="getrootobject" chunk="Search_Chunk6.xml" /><stem n="integ" chunk="Search_Chunk6.xml" /><stem n="getjsonobject" chunk="Search_Chunk6.xml" /><stem n="getint" chunk="Search_Chunk6.xml" /><stem n="areacalcul" chunk="Search_Chunk6.xml" /><stem n="pipeline-process" chunk="Search_Chunk6.xml" /><stem n="storag" chunk="Search_Chunk6.xml" /><stem n="build-in" chunk="Search_Chunk6.xml" /><stem n="hbase" chunk="Search_Chunk6.xml" /><stem n="intern" chunk="Search_Chunk6.xml" /><stem n="extern" chunk="Search_Chunk6.xml" /><stem n="hive" chunk="Search_Chunk6.xml" /><stem n="mongodb" chunk="Search_Chunk6.xml" /><stem n="built-in" chunk="Search_Chunk6.xml" /><stem n="meet" chunk="Search_Chunk6.xml" /><stem n="abstractdatasink" chunk="Search_Chunk6.xml" /><stem n="subclass" chunk="Search_Chunk6.xml" /><stem n="flushcount" chunk="Search_Chunk6.xml" /><stem n="processintern" chunk="Search_Chunk6.xml" /><stem n="meant" chunk="Search_Chunk6.xml" /><stem n="abstractprocessor" chunk="Search_Chunk6.xml" /><stem n="netsf" chunk="Search_Chunk6.xml" /><stem n="inherit" chunk="Search_Chunk6.xml" /><stem n="count" chunk="Search_Chunk6.xml" /><stem n="byte" chunk="Search_Chunk6.xml" /><stem n="verifi" chunk="Search_Chunk6.xml" /><stem n="accuraci" chunk="Search_Chunk6.xml" /><stem n="datasink" chunk="Search_Chunk6.xml" /><stem n="invok" chunk="Search_Chunk6.xml" /><stem n="check" chunk="Search_Chunk6.xml" /><stem n="make" chunk="Search_Chunk6.xml" /><stem n="sure" chunk="Search_Chunk6.xml" /><stem n="enabl" chunk="Search_Chunk6.xml" /><stem n="event" chunk="Search_Chunk6.xml" /><stem n="elig" chunk="Search_Chunk6.xml" /><stem n="flush" chunk="Search_Chunk6.xml" /><stem n="cach" chunk="Search_Chunk6.xml" /><stem n="amount" chunk="Search_Chunk6.xml" /><stem n="via" chunk="Search_Chunk7.xml" /><stem n="datasinkfil" chunk="Search_Chunk7.xml" /><stem n="txt" chunk="Search_Chunk7.xml" /><stem n="addit" chunk="Search_Chunk7.xml" /><stem n="junit" chunk="Search_Chunk7.xml" /><stem n="contact" chunk="Search_Chunk7.xml" /><stem n="support" chunk="Search_Chunk7.xml" /><stem n="engin" chunk="Search_Chunk7.xml" /><stem n="assign" chunk="Search_Chunk7.xml" /><stem n="filewrit" chunk="Search_Chunk7.xml" /><stem n="bufferedwrit" chunk="Search_Chunk7.xml" /><stem n="ioexcept" chunk="Search_Chunk7.xml" /><stem n="initializationexcept" chunk="Search_Chunk7.xml" /><stem n="data_sink_file_path" chunk="Search_Chunk7.xml" /><stem n="locat" chunk="Search_Chunk7.xml" /><stem n="data_sink_fil" chunk="Search_Chunk7.xml" /><stem n="datasinkout" chunk="Search_Chunk7.xml" /><stem n="writer" chunk="Search_Chunk7.xml" /><stem n="constructor" chunk="Search_Chunk7.xml" /><stem n="our" chunk="Search_Chunk7.xml" /><stem n="case" chunk="Search_Chunk7.xml" /><stem n="mean" chunk="Search_Chunk7.xml" /><stem n="println" chunk="Search_Chunk7.xml" /><stem n="debug" chunk="Search_Chunk7.xml" /><stem n="successfulli" chunk="Search_Chunk7.xml" /><stem n="fail" chunk="Search_Chunk7.xml" /><stem n="getmessag" chunk="Search_Chunk7.xml" /><stem n="path" chunk="Search_Chunk7.xml" /><stem n="exist" chunk="Search_Chunk7.xml" /><stem n="occur" chunk="Search_Chunk7.xml" /><stem n="either" chunk="Search_Chunk7.xml" /><stem n="therefor" chunk="Search_Chunk7.xml" /><stem n="could" chunk="Search_Chunk7.xml" /><stem n="mkdir" chunk="Search_Chunk7.xml" /><stem n="convert" chunk="Search_Chunk7.xml" /><stem n="counter" chunk="Search_Chunk7.xml" /><stem n="abstractdata" chunk="Search_Chunk7.xml" /><stem n="both" chunk="Search_Chunk7.xml" /><stem n="number" chunk="Search_Chunk7.xml" /><stem n="still" chunk="Search_Chunk7.xml" /><stem n="track" chunk="Search_Chunk7.xml" /><stem n="increment" chunk="Search_Chunk7.xml" /><stem n="tostr" chunk="Search_Chunk7.xml" /><stem n="directli" chunk="Search_Chunk7.xml" /><stem n="combin" chunk="Search_Chunk7.xml" /><stem n="ms" chunk="Search_Chunk7.xml" /><stem n="none" chunk="Search_Chunk7.xml" /><stem n="explicitli" chunk="Search_Chunk7.xml" /><stem n="erron" chunk="Search_Chunk7.xml" /><stem n="fileread" chunk="Search_Chunk7.xml" /><stem n="testcas" chunk="Search_Chunk7.xml" /><stem n="jsonseri" chunk="Search_Chunk7.xml" /><stem n="jsondatasink" chunk="Search_Chunk7.xml" /><stem n="proper" chunk="Search_Chunk7.xml" /><stem n="instanc" chunk="Search_Chunk7.xml" /><stem n="basedir" chunk="Search_Chunk7.xml" /><stem n="safetotest" chunk="Search_Chunk7.xml" /><stem n="flag" chunk="Search_Chunk7.xml" /><stem n="determin" chunk="Search_Chunk7.xml" /><stem n="whether" chunk="Search_Chunk7.xml" /><stem n="safe" chunk="Search_Chunk7.xml" /><stem n="ran" chunk="Search_Chunk7.xml" /><stem n="wnat" chunk="Search_Chunk7.xml" /><stem n="cleanup" chunk="Search_Chunk7.xml" /><stem n="choos" chunk="Search_Chunk7.xml" /><stem n="sinc" chunk="Search_Chunk7.xml" /><stem n="setproperti" chunk="Search_Chunk7.xml" /><stem n="dir" chunk="Search_Chunk7.xml" /><stem n="startup" chunk="Search_Chunk7.xml" /><stem n="testprocessintern" chunk="Search_Chunk7.xml" /><stem n="testdatain" chunk="Search_Chunk7.xml" /><stem n="just" chunk="Search_Chunk7.xml" /><stem n="src" chunk="Search_Chunk7.xml" /><stem n="tojson" chunk="Search_Chunk7.xml" /><stem n="notic" chunk="Search_Chunk7.xml" /><stem n="function" chunk="Search_Chunk7.xml" /><stem n="instead" chunk="Search_Chunk7.xml" /><stem n="conjunct" chunk="Search_Chunk7.xml" /><stem n="did" chunk="Search_Chunk7.xml" /><stem n="how" chunk="Search_Chunk7.xml" /><stem n="facilit" chunk="Search_Chunk7.xml" /><stem n="in" chunk="Search_Chunk7.xml" /><stem n="maven™" chunk="Search_Chunk7.xml" /><stem n="archetyp" chunk="Search_Chunk7.xml" /><stem n="download" chunk="Search_Chunk7.xml" /><stem n="environ" chunk="Search_Chunk7.xml" /><stem n="desir" chunk="Search_Chunk7.xml" /><stem n="correspond" chunk="Search_Chunk7.xml" /><stem n="pom" chunk="Search_Chunk7.xml" /><stem n="consol" chunk="Search_Chunk7.xml" /><stem n="select" chunk="Search_Chunk7.xml" /><stem n="section" chunk="Search_Chunk7.xml" /><stem n="softwar" chunk="Search_Chunk7.xml" /><stem n="tab" chunk="Search_Chunk7.xml" /><stem n="icon" chunk="Search_Chunk7.xml" /><stem n="project" chunk="Search_Chunk7.xml" /><stem n="link" chunk="Search_Chunk7.xml" /><stem n="access" chunk="Search_Chunk7.xml" /><stem n="instal" chunk="Search_Chunk7.xml" /><stem n="maven" chunk="Search_Chunk7.xml" /><stem n="repositori" chunk="Search_Chunk7.xml" /><stem n="mvn" chunk="Search_Chunk7.xml" /><stem n="install-fil" chunk="Search_Chunk7.xml" /><stem n="dfile" chunk="Search_Chunk7.xml" /><stem n="&lt;path" chunk="Search_Chunk7.xml" /><stem n="-dfile=&lt;path" chunk="Search_Chunk7.xml" /><stem n="archetype&gt;" chunk="Search_Chunk7.xml" /><stem n="dgroupid" chunk="Search_Chunk7.xml" /><stem n="-dgroupid=com.deleido" chunk="Search_Chunk7.xml" /><stem n="dartifactid" chunk="Search_Chunk7.xml" /><stem n="&lt;plugin" chunk="Search_Chunk7.xml" /><stem n="-dartifactid=&lt;plugin" chunk="Search_Chunk7.xml" /><stem n="type&gt;-example-archetyp" chunk="Search_Chunk7.xml" /><stem n="type&gt;" chunk="Search_Chunk7.xml" /><stem n="type&gt;-exampl" chunk="Search_Chunk7.xml" /><stem n="example-archetyp" chunk="Search_Chunk7.xml" /><stem n="dversion" chunk="Search_Chunk7.xml" /><stem n="&lt;version" chunk="Search_Chunk7.xml" /><stem n="-dversion=&lt;vers" chunk="Search_Chunk7.xml" /><stem n="downloaded&gt;" chunk="Search_Chunk7.xml" /><stem n="dpackag" chunk="Search_Chunk7.xml" /><stem n="jar" chunk="Search_Chunk7.xml" /><stem n="-dpackaging=jar" chunk="Search_Chunk7.xml" /><stem n="dpomfil" chunk="Search_Chunk7.xml" /><stem n="-dpomfile=&lt;plugin" chunk="Search_Chunk7.xml" /><stem n="sonatyp" chunk="Search_Chunk7.xml" /><stem n="nexus™" chunk="Search_Chunk7.xml" /><stem n="archiva™" chunk="Search_Chunk7.xml" /><stem n="upload" chunk="Search_Chunk7.xml" /><stem n="avoid" chunk="Search_Chunk7.xml" /><stem n="approach" chunk="Search_Chunk7.xml" /><stem n="updat" chunk="Search_Chunk7.xml" /><stem n="catalog" chunk="Search_Chunk7.xml" /><stem n="crawl" chunk="Search_Chunk7.xml" /><stem n="archetype-catalog" chunk="Search_Chunk7.xml" /><stem n="stanza" chunk="Search_Chunk7.xml" /><stem n="&lt;archetype&gt;" chunk="Search_Chunk7.xml" /><stem n="&lt;groupid&gt;com" chunk="Search_Chunk7.xml" /><stem n="deleidos&lt;" chunk="Search_Chunk7.xml" /><stem n="groupid&gt;" chunk="Search_Chunk7.xml" /><stem n="&lt;artifactid&gt;pars" chunk="Search_Chunk7.xml" /><stem n="&lt;artifactid&gt;parser-exampl" chunk="Search_Chunk7.xml" /><stem n="&lt;artifactid&gt;parser-example-archetype&lt;" chunk="Search_Chunk7.xml" /><stem n="example-archetype&lt;" chunk="Search_Chunk7.xml" /><stem n="archetype&lt;" chunk="Search_Chunk7.xml" /><stem n="artifactid&gt;" chunk="Search_Chunk7.xml" /><stem n="&lt;version&gt;" chunk="Search_Chunk7.xml" /><stem n="version&gt;" chunk="Search_Chunk7.xml" /><stem n="c" chunk="Search_Chunk7.xml" /><stem n="username&gt;" chunk="Search_Chunk8.xml" /><stem n="m2" chunk="Search_Chunk8.xml" /><stem n="look" chunk="Search_Chunk8.xml" /><stem n="similar" chunk="Search_Chunk8.xml" /><stem n="parser-example-archetyp" chunk="Search_Chunk8.xml" /><stem n="parser-exampl" chunk="Search_Chunk8.xml" /><stem n="encod" chunk="Search_Chunk8.xml" /><stem n="&lt;archetype-catalog" chunk="Search_Chunk8.xml" /><stem n="&lt;archetyp" chunk="Search_Chunk8.xml" /><stem n="xsi" chunk="Search_Chunk8.xml" /><stem n="schemaloc" chunk="Search_Chunk8.xml" /><stem n="&lt;http" chunk="Search_Chunk8.xml" /><stem n="plugin" chunk="Search_Chunk8.xml" /><stem n="maven-archetyp" chunk="Search_Chunk8.xml" /><stem n="maven-archetype-plugin" chunk="Search_Chunk8.xml" /><stem n="archetype-plugin" chunk="Search_Chunk8.xml" /><stem n="http" chunk="Search_Chunk8.xml" /><stem n="xsd" chunk="Search_Chunk8.xml" /><stem n="archetype-catalog-1" chunk="Search_Chunk8.xml" /><stem n="catalog-1" chunk="Search_Chunk8.xml" /><stem n="xsd&gt;" chunk="Search_Chunk8.xml" /><stem n="xmln" chunk="Search_Chunk8.xml" /><stem n="w3" chunk="Search_Chunk8.xml" /><stem n="2001" chunk="Search_Chunk8.xml" /><stem n="xmlschema" chunk="Search_Chunk8.xml" /><stem n="xmlschema-inst" chunk="Search_Chunk8.xml" /><stem n="&lt;archetypes&gt;" chunk="Search_Chunk8.xml" /><stem n="&lt;description&gt;pars" chunk="Search_Chunk8.xml" /><stem n="&lt;description&gt;parser-exampl" chunk="Search_Chunk8.xml" /><stem n="&lt;description&gt;parser-example-archetype&lt;" chunk="Search_Chunk8.xml" /><stem n="description&gt;" chunk="Search_Chunk8.xml" /><stem n="archetypes&gt;" chunk="Search_Chunk8.xml" /><stem n="archetype-catalog&gt;" chunk="Search_Chunk8.xml" /><stem n="catalog&gt;" chunk="Search_Chunk8.xml" /><stem n="gener" chunk="Search_Chunk8.xml" /><stem n="darchetypecatalog" chunk="Search_Chunk8.xml" /><stem n="-darchetypecatalog=loc" chunk="Search_Chunk8.xml" /><stem n="darchetypegroupid" chunk="Search_Chunk8.xml" /><stem n="-darchetypegroupid=com.deleido" chunk="Search_Chunk8.xml" /><stem n="darchetypeartifactid" chunk="Search_Chunk8.xml" /><stem n="-darchetypeartifactid=parser-example-archetyp" chunk="Search_Chunk8.xml" /><stem n="darchetypevers" chunk="Search_Chunk8.xml" /><stem n="-darchetypeversion=&lt;version&gt;" chunk="Search_Chunk8.xml" /><stem n="prompt" chunk="Search_Chunk8.xml" /><stem n="id" chunk="Search_Chunk8.xml" /><stem n="artifact" chunk="Search_Chunk8.xml" /><stem n="review" chunk="Search_Chunk8.xml" /><stem n="editor" chunk="Search_Chunk8.xml" /><stem n="choic" chunk="Search_Chunk8.xml" /><stem n="folder" chunk="Search_Chunk8.xml" /><stem n="program" chunk="Search_Chunk8.xml" /><stem n="in-lin" chunk="Search_Chunk8.xml" /><stem n="current" chunk="Search_Chunk8.xml" /><stem n="featur" chunk="Search_Chunk8.xml" /><stem n="assembl" chunk="Search_Chunk8.xml" /><stem n="trick" chunk="Search_Chunk8.xml" /><stem n="depend" chunk="Search_Chunk8.xml" /><stem n="nest" chunk="Search_Chunk8.xml" /><stem n="met" chunk="Search_Chunk8.xml" /><stem n="tm" chunk="Search_Chunk8.xml" /><stem n="hard" chunk="Search_Chunk8.xml" /><stem n="drive" chunk="Search_Chunk8.xml" /><stem n="term" chunk="Search_Chunk8.xml" /><stem n="disclaim" chunk="Search_Chunk8.xml" /><stem n="warranti" chunk="Search_Chunk8.xml" /><stem n="limit" chunk="Search_Chunk8.xml" /><stem n="liabil" chunk="Search_Chunk8.xml" /><stem n="accompani" chunk="Search_Chunk8.xml" /><stem n="licens" chunk="Search_Chunk8.xml" /><stem n="agreement" chunk="Search_Chunk8.xml" /><stem n="leido" chunk="Search_Chunk8.xml" /><stem n="affili" chunk="Search_Chunk8.xml" /><stem n="supplier" chunk="Search_Chunk8.xml" /><stem n="expect" chunk="Search_Chunk8.xml" /><stem n="machin" chunk="Search_Chunk8.xml" /><stem n="further" chunk="Search_Chunk8.xml" /><stem n="accur" chunk="Search_Chunk8.xml" /><stem n="error-fre" chunk="Search_Chunk8.xml" /><stem n="free" chunk="Search_Chunk8.xml" /><stem n="subject" chunk="Search_Chunk8.xml" /><stem n="sole" chunk="Search_Chunk8.xml" /><stem n="discret" chunk="Search_Chunk8.xml" /><stem n="licensor" chunk="Search_Chunk8.xml" /><stem n="oral" chunk="Search_Chunk8.xml" /><stem n="express" chunk="Search_Chunk8.xml" /><stem n="impli" chunk="Search_Chunk8.xml" /><stem n="relat" chunk="Search_Chunk8.xml" /><stem n="without" chunk="Search_Chunk8.xml" /><stem n="merchant" chunk="Search_Chunk8.xml" /><stem n="fit" chunk="Search_Chunk8.xml" /><stem n="particular" chunk="Search_Chunk8.xml" /><stem n="purpos" chunk="Search_Chunk8.xml" /><stem n="non-infring" chunk="Search_Chunk8.xml" /><stem n="infring" chunk="Search_Chunk8.xml" /><stem n="third" chunk="Search_Chunk8.xml" /><stem n="parti" chunk="Search_Chunk8.xml" /><stem n="right" chunk="Search_Chunk8.xml" /><stem n="shall" chunk="Search_Chunk8.xml" /><stem n="liabl" chunk="Search_Chunk8.xml" /><stem n="end" chunk="Search_Chunk8.xml" /><stem n="consequenti" chunk="Search_Chunk8.xml" /><stem n="incident" chunk="Search_Chunk8.xml" /><stem n="indirect" chunk="Search_Chunk8.xml" /><stem n="exemplari" chunk="Search_Chunk8.xml" /><stem n="punit" chunk="Search_Chunk8.xml" /><stem n="special" chunk="Search_Chunk8.xml" /><stem n="damag" chunk="Search_Chunk8.xml" /><stem n="lost" chunk="Search_Chunk8.xml" /><stem n="profit" chunk="Search_Chunk8.xml" /><stem n="cost" chunk="Search_Chunk8.xml" /><stem n="substitut" chunk="Search_Chunk8.xml" /><stem n="good" chunk="Search_Chunk8.xml" /><stem n="aris" chunk="Search_Chunk8.xml" /><stem n="caus" chunk="Search_Chunk8.xml" /><stem n="tort" chunk="Search_Chunk8.xml" /><stem n="neglig" chunk="Search_Chunk8.xml" /><stem n="contract" chunk="Search_Chunk8.xml" /><stem n="otherwis" chunk="Search_Chunk8.xml" /><stem n="regardless" chunk="Search_Chunk8.xml" /><stem n="advis" chunk="Search_Chunk8.xml" /><stem n="possibl" chunk="Search_Chunk8.xml" /><stem n="advanc" chunk="Search_Chunk8.xml" /><stem n="maximum" chunk="Search_Chunk8.xml" /><stem n="extent" chunk="Search_Chunk8.xml" /><stem n="permit" chunk="Search_Chunk8.xml" /><stem n="applic" chunk="Search_Chunk8.xml" /><stem n="law" chunk="Search_Chunk8.xml" /><stem n="acknowledg" chunk="Search_Chunk8.xml" /><stem n="agre" chunk="Search_Chunk8.xml" /><stem n="respons" chunk="Search_Chunk8.xml" /><stem n="excess" chunk="Search_Chunk8.xml" /><stem n="fee" chunk="Search_Chunk8.xml" /><stem n="paid" chunk="Search_Chunk8.xml" /><stem n="matter" chunk="Search_Chunk8.xml" /><stem n="beyond" chunk="Search_Chunk8.xml" /><stem n="reason" chunk="Search_Chunk8.xml" /><stem n="proprietari" chunk="Search_Chunk8.xml" /><stem n="recipi" chunk="Search_Chunk8.xml" /><stem n="destroi" chunk="Search_Chunk8.xml" /><stem n="upon" chunk="Search_Chunk8.xml" /><stem n="request" chunk="Search_Chunk8.xml" /><stem n="longer" chunk="Search_Chunk8.xml" /><stem n="commun" chunk="Search_Chunk8.xml" /><stem n="consent" chunk="Search_Chunk8.xml" /><stem n="trade" chunk="Search_Chunk8.xml" /><stem n="secret" chunk="Search_Chunk8.xml" /><stem n="commerci" chunk="Search_Chunk8.xml" /><stem n="financi" chunk="Search_Chunk8.xml" /><stem n="privileg" chunk="Search_Chunk8.xml" /><stem n="confidenti" chunk="Search_Chunk8.xml" /><stem n="exempt" chunk="Search_Chunk8.xml" /><stem n="disclosur" chunk="Search_Chunk8.xml" /><stem n="freedom" chunk="Search_Chunk8.xml" /><stem n="act" chunk="Search_Chunk8.xml" /><stem n="5" chunk="Search_Chunk8.xml" /><stem n="u" chunk="Search_Chunk8.xml" /><stem n="§" chunk="Search_Chunk8.xml" /><stem n="552" chunk="Search_Chunk8.xml" /><stem n="trademark" chunk="Search_Chunk8.xml" /><stem n="power" chunk="Search_Chunk8.xml" /><stem n="eucalyptus®" chunk="Search_Chunk8.xml" /><stem n="cloud" chunk="Search_Chunk8.xml" /><stem n="amazon" chunk="Search_Chunk8.xml" /><stem n="web" chunk="Search_Chunk8.xml" /><stem n="services™" chunk="Search_Chunk8.xml" /><stem n="list" chunk="Search_Chunk8.xml" /><stem n="referenc" chunk="Search_Chunk8.xml" /><stem n="suit" chunk="Search_Chunk8.xml" /><stem n="adob" chunk="Search_Chunk8.xml" /><stem n="flash" chunk="Search_Chunk8.xml" /><stem n="shockwav" chunk="Search_Chunk8.xml" /><stem n="regist" chunk="Search_Chunk8.xml" /><stem n="incorpor" chunk="Search_Chunk8.xml" /><stem n="unit" chunk="Search_Chunk8.xml" /><stem n="state" chunk="Search_Chunk8.xml" /><stem n="countri" chunk="Search_Chunk8.xml" /><stem n="aw" chunk="Search_Chunk8.xml" /><stem n="elast" chunk="Search_Chunk8.xml" /><stem n="comput" chunk="Search_Chunk8.xml" /><stem n="ec2" chunk="Search_Chunk8.xml" /><stem n="vpc" chunk="Search_Chunk8.xml" /><stem n="dynamodb" chunk="Search_Chunk8.xml" /><stem n="rout" chunk="Search_Chunk8.xml" /><stem n="53" chunk="Search_Chunk8.xml" /><stem n="logo" chunk="Search_Chunk8.xml" /><stem n="inc" chunk="Search_Chunk8.xml" /><stem n="archiva" chunk="Search_Chunk8.xml" /><stem n="cassandra" chunk="Search_Chunk8.xml" /><stem n="hadoop" chunk="Search_Chunk8.xml" /><stem n="hue" chunk="Search_Chunk8.xml" /><stem n="phoenix" chunk="Search_Chunk8.xml" /><stem n="solr" chunk="Search_Chunk8.xml" /><stem n="zoie" chunk="Search_Chunk8.xml" /><stem n="activemq" chunk="Search_Chunk8.xml" /><stem n="foundat" chunk="Search_Chunk8.xml" /><stem n="arcsight" chunk="Search_Chunk8.xml" /><stem n="ca" chunk="Search_Chunk8.xml" /><stem n="copyright" chunk="Search_Chunk8.xml" /><stem n="2007" chunk="Search_Chunk8.xml" /><stem n="ja" chunk="Search_Chunk9.xml" /><stem n="ja-sig" chunk="Search_Chunk9.xml" /><stem n="sig" chunk="Search_Chunk9.xml" /><stem n="cento" chunk="Search_Chunk9.xml" /><stem n="cloudera" chunk="Search_Chunk9.xml" /><stem n="cloudshield" chunk="Search_Chunk9.xml" /><stem n="technolog" chunk="Search_Chunk9.xml" /><stem n="ctool" chunk="Search_Chunk9.xml" /><stem n="open-sourc" chunk="Search_Chunk9.xml" /><stem n="webdetail" chunk="Search_Chunk9.xml" /><stem n="consult" chunk="Search_Chunk9.xml" /><stem n="compani" chunk="Search_Chunk9.xml" /><stem n="portug" chunk="Search_Chunk9.xml" /><stem n="drupal" chunk="Search_Chunk9.xml" /><stem n="dri" chunk="Search_Chunk9.xml" /><stem n="buytaert" chunk="Search_Chunk9.xml" /><stem n="elasticsearch" chunk="Search_Chunk9.xml" /><stem n="bv" chunk="Search_Chunk9.xml" /><stem n="eucalyptu" chunk="Search_Chunk9.xml" /><stem n="walru" chunk="Search_Chunk9.xml" /><stem n="firefox" chunk="Search_Chunk9.xml" /><stem n="mozilla" chunk="Search_Chunk9.xml" /><stem n="groovi" chunk="Search_Chunk9.xml" /><stem n="languag" chunk="Search_Chunk9.xml" /><stem n="sustain" chunk="Search_Chunk9.xml" /><stem n="led" chunk="Search_Chunk9.xml" /><stem n="springsourc" chunk="Search_Chunk9.xml" /><stem n="h2" chunk="Search_Chunk9.xml" /><stem n="unmodifi" chunk="Search_Chunk9.xml" /><stem n="eclips" chunk="Search_Chunk9.xml" /><stem n="hybridfox" chunk="Search_Chunk9.xml" /><stem n="maintain" chunk="Search_Chunk9.xml" /><stem n="css" chunk="Search_Chunk9.xml" /><stem n="corp" chunk="Search_Chunk9.xml" /><stem n="r" chunk="Search_Chunk9.xml" /><stem n="d" chunk="Search_Chunk9.xml" /><stem n="lab" chunk="Search_Chunk9.xml" /><stem n="v" chunk="Search_Chunk9.xml" /><stem n="kibana" chunk="Search_Chunk9.xml" /><stem n="linux®" chunk="Search_Chunk9.xml" /><stem n="linu" chunk="Search_Chunk9.xml" /><stem n="torvald" chunk="Search_Chunk9.xml" /><stem n="microsoft" chunk="Search_Chunk9.xml" /><stem n="window" chunk="Search_Chunk9.xml" /><stem n="word" chunk="Search_Chunk9.xml" /><stem n="corpor" chunk="Search_Chunk9.xml" /><stem n="mongo" chunk="Search_Chunk9.xml" /><stem n="10gen" chunk="Search_Chunk9.xml" /><stem n="oracl" chunk="Search_Chunk9.xml" /><stem n="respect" chunk="Search_Chunk9.xml" /><stem n="owner" chunk="Search_Chunk9.xml" /><stem n="pentaho" chunk="Search_Chunk9.xml" /><stem n="postgresql" chunk="Search_Chunk9.xml" /><stem n="global" chunk="Search_Chunk9.xml" /><stem n="putti" chunk="Search_Chunk9.xml" /><stem n="1997-2012" chunk="Search_Chunk9.xml" /><stem n="1997" chunk="Search_Chunk9.xml" /><stem n="2012" chunk="Search_Chunk9.xml" /><stem n="simon" chunk="Search_Chunk9.xml" /><stem n="tatham" chunk="Search_Chunk9.xml" /><stem n="nexu" chunk="Search_Chunk9.xml" /><stem n="tableau" chunk="Search_Chunk9.xml" /><stem n="twitter" chunk="Search_Chunk9.xml" /><stem n="digitaledgesupport" chunk="Search_Chunk9.xml" /><stem n="submit" chunk="Search_Chunk9.xml" /><stem n="idea" chunk="Search_Chunk9.xml" /><stem n="feedback" chunk="Search_Chunk9.xml" /><stem n="www9" chunk="Search_Chunk9.xml" /><stem n="v1idea" chunk="Search_Chunk9.xml" /><stem n="©" chunk="Search_Chunk9.xml" /><stem n="reserv" chunk="Search_Chunk9.xml" /></ents><chunkfiles><Url Source="Search_Chunk1.xml" /><Url Source="Search_Chunk2.xml" /><Url Source="Search_Chunk3.xml" /><Url Source="Search_Chunk4.xml" /><Url Source="Search_Chunk5.xml" /><Url Source="Search_Chunk6.xml" /><Url Source="Search_Chunk7.xml" /><Url Source="Search_Chunk8.xml" /><Url Source="Search_Chunk9.xml" /></chunkfiles></index>