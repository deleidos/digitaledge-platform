<?xml version="1.0" encoding="utf-8"?>
<!--
* The MIT License
*
* Copyright (c) 2008
* United Nations Office at Geneva
* Center for Advanced Visual Analytics
* http://cava.unog.ch
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
* 
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
* 
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
* THE SOFTWARE.
-->
<mx:HBox
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:ravis="org.un.cava.birdeye.ravis.graphLayout.visual.*"
	xmlns:lc="org.un.cava.birdeye.ravis.components.ui.controls.layouterControls.*"
	xmlns:vc="org.un.cava.birdeye.ravis.components.ui.controls.vgraphControls.*"
	xmlns:ui="org.un.cava.birdeye.ravis.components.ui.*"
	xmlns:dp="org.un.cava.birdeye.ravis.components.ui.dataPresentation.*"
	xmlns:flexlib="http://code.google.com/p/flexlib/"
	xmlns:graph="com.deleidos.rtws.alertviz.expandgraph.*"
	width="100%" height="100%"
	creationPolicy="all"
	creationComplete="init();" xmlns:views="com.deleidos.rtws.alertviz.expandgraph.views.*"
	>
	
	<mx:Style source="styles/main.css" />
	
	<mx:WipeLeft id="wipeLeft" duration="1000" />
	<mx:WipeRight id="wipeRight" duration="1000" />
	
	
	<mx:VBox width="100%" height="100%" horizontalAlign="center" verticalAlign="middle" >
			
			<mx:HBox id="DivNavRB" width="100%" height="100%" horizontalGap="5">
				<mx:HDividedBox width="100%" height="100%">
				
				<views:GraphDataView id="graphData"
									 width="30%"
									 height="100%">
				</views:GraphDataView>
				
				<!-- Graph Panel -->
				<mx:Canvas id="graphCnvs"
						   borderStyle="solid"
						   borderColor="#CCCCCC"
						   backgroundColor="#FFFFFF"
						   width="70%"
						   height="100%"
						   verticalScrollPolicy="off">		
					
					<ravis:VisualGraph id="vgraph" width="100%" height="100%" 
									   left="0" right="0" top="0" bottom="5" backgroundColor="#FFFFFF" alpha="1"
									   resize="vgraph.draw(VisualGraph.DF_RESET_LL)"
									   visibilityLimitActive="false"
									   >
					</ravis:VisualGraph>
				</mx:Canvas>
				<!-- End of Graph Panel -->
				
				</mx:HDividedBox>				
			</mx:HBox>
	</mx:VBox>
	<mx:Script>
		<![CDATA[
			import com.deleidos.rtws.alertviz.expandgraph.events.ClientKeyboardEvent;
			
			import org.un.cava.birdeye.ravis.components.renderers.edgeLabels.BaseEdgeLabelRenderer;
			import org.un.cava.birdeye.ravis.components.renderers.nodes.SizeByValueNodeRenderer;
			import org.un.cava.birdeye.ravis.graphLayout.data.Graph;
			import org.un.cava.birdeye.ravis.graphLayout.layout.*;
			import org.un.cava.birdeye.ravis.graphLayout.visual.edgeRenderers.FlowEdgeRenderer;
			
			/* Init function, initiates the HTTP
			* request. All further initalisation is done
			* in the event handler for the HTTP Service */
			private function init():void {
				
				/* init a graph object with the XML data */
				vgraph.graph = new Graph("ExpandGraph",true);
				vgraph.newNodesDefaultVisible = true;
				vgraph.visibilityLimitActive = true;
				vgraph.maxVisibleDistance = 2;
				
				/* provide the control components with some initial settings */
				vgraph.layouter = new ConcentricRadialLayouter(vgraph);
				vgraph.itemRenderer = new ClassFactory(SizeByValueNodeRenderer);
				vgraph.edgeRendererFactory = new ClassFactory(FlowEdgeRenderer);
				vgraph.edgeLabelRenderer = new ClassFactory(BaseEdgeLabelRenderer);
				
				vgraph.layouter.autoFitEnabled = true;
				vgraph.layouter.layoutChanged = true;
				
				vgraph.layouter.disableAnimation = false;
				vgraph.mouseEnabled = true;
				vgraph.doubleClickEnabled = true;
				
				/* the following kicks it off .... */
				vgraph.draw();
				
				addEventListener(Event.ADDED_TO_STAGE, stageAddHandler);
			}
			
			protected function stageAddHandler(e:Event):void {
				stage.addEventListener(KeyboardEvent.KEY_DOWN, keyboardHandler);
				stage.addEventListener(KeyboardEvent.KEY_UP, keyboardHandler);
				removeEventListener(Event.ADDED_TO_STAGE, stageAddHandler);
			}
			
			protected function keyboardHandler( event:KeyboardEvent ):void{
				var clientEvent:String = event.type == KeyboardEvent.KEY_DOWN ? ClientKeyboardEvent.KEY_DOWN : ClientKeyboardEvent.KEY_UP;	
				dispatchEvent(new ClientKeyboardEvent(clientEvent, event.keyCode));
			}

		]]>
	</mx:Script>		
	
	
</mx:HBox>
