<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:rtws="com.deleidos.rtws.commons.view.component.*"
		 width="100%" height="100%"
		 creationComplete="setStateWrtAlerts();">
	
	<s:layout>
		<s:VerticalLayout verticalAlign="top" horizontalAlign="center" />
	</s:layout>
	
	<s:states>
		<s:State id="msgOnlyState" name="rtws_msgOnlyState" />
		<s:State id="dataDisplayState" name="rtws_dataDisplay" />
	</s:states>
	
	<rtws:StatusMessageDisplay width="75%" statusMsg="{_currStatusMsg}" />
	
	<s:DataGrid id="alertsDataGrid"
							columns="{_columns}" 
							dataProvider="{_alerts}"
							selectionChange="onDataGridSelectionChange(event);"
							width="100%" height="100%"
							resize="onDataGridResize();"
							visible="false" 
							includeInLayout="false"
							visible.rtws_dataDisplay="true" 
							includeInLayout.rtws_dataDisplay="true" />
	
	<fx:Script>
		<![CDATA[
			import com.deleidos.rtws.alertviz.events.AlertDataCommandEvent;
			import com.deleidos.rtws.alertviz.models.Alert;
			import com.deleidos.rtws.alertviz.models.AlertDataModel;
			import com.deleidos.rtws.commons.model.status.StatusMessage;
			import com.deleidos.rtws.commons.model.status.StatusType;
			import com.deleidos.rtws.commons.util.StringUtils;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.events.CollectionEvent;
			import mx.events.CollectionEventKind;
			
			import spark.collections.Sort;
			import spark.components.gridClasses.GridColumn;
			import spark.events.GridSelectionEvent;
			
			[Bindable] private var _currStatusMsg:StatusMessage = null;
			
			private var _columnOrderStr:String = new String();
			private var _columnOrder:Array = new Array();
			private var _lastSelectedItem:Object = null;
			
			[Bindable] private var _columns:ArrayCollection = new ArrayCollection();
			[Bindable] private var _alerts:ArrayCollection = new ArrayCollection();
			
			public function set columnOrderStr(value:String):void
			{
				_columnOrderStr = value;
				if(StringUtils.isNotBlank(_columnOrderStr)) {
					_columnOrder = _columnOrderStr.split("\n");
				}
				else {
					_columnOrder = new Array();
				}
			}
			
			public function set alerts(value:ArrayCollection):void {
				if(_alerts != null) {
					_alerts.removeEventListener(CollectionEvent.COLLECTION_CHANGE, onAlertsChange);
				}
				
				_alerts = value;
				if(_alerts != null) {
					_alerts.addEventListener(CollectionEvent.COLLECTION_CHANGE, onAlertsChange);
				}
			}
			
			public function selectAlerts(alertsToSelect:ArrayList):void {
				var newSelection:Vector.<Object> = new Vector.<Object>();
				
				if(alertsToSelect != null) {
					for(var index:int=0; index < alertsToSelect.length; index++) {
						if(alertsToSelect.getItemAt(index) != null) {
							newSelection.push(alertsToSelect.getItemAt(index));
						}
					}
				}
				
				if(newSelection.length > 0) {
					// Current business rules only allow for single item selection.
					alertsDataGrid.selectedItem = newSelection[0];
					scrollToCurrentSelection();
				}
			}
			
			public function deselectAlerts(alertsToDeselect:ArrayList):void {
				if(alertsToDeselect != null && alertsToDeselect.length > 0 && alertsDataGrid.selectedItem != null) {
					if(alertsToDeselect.getItemIndex(alertsDataGrid.selectedItem) >= 0) {
						alertsDataGrid.selectedItem = null;
					}
				}
			}
			
			public function scrollToAlerts(scrollTargets:Vector.<Object>):void {
				if(scrollTargets != null && _alerts != null) {
					var maxIndex:int = -1;
					
					for(var index:int=0; index < scrollTargets.length; index++) {
						maxIndex = Math.max(maxIndex, _alerts.getItemIndex(scrollTargets[index]));
					}
					
					if(maxIndex >= 0 && maxIndex < _alerts.length) {
						alertsDataGrid.ensureCellIsVisible(maxIndex);
					}
				}
			}
			
			private function onAlertsChange(event:CollectionEvent):void {
				switch (event.kind)
				{
					case CollectionEventKind.ADD :
						var entry:Object = event.items[0];
						
						addColumns(entry);
						
						/* NiceToHave move tracking code back in here, but currently, the tracking prop doesn't dispatch an event so there wouldn't be a way to push
						 * changes down to the view
						 */
						
						break;
					case CollectionEventKind.REMOVE:
							// NiceToHave Need to occasionally run a clean-up check to see if columns are unused and elligable for removal.
						break;
					default:
						break;
				}
				
				setStateWrtAlerts();
			}
			
			/**
			 * Given a new model entry, determine if new keys exists and
			 * if so create a new column in the alert textual datagrid
			 * using this key so the data can be displayed in the datagrid.
			 */ 
			private function addColumns(entry:Object):void 
			{
				var addList:Array = new Array();
				
				for(var key:String in entry)
				{
					if(!doesColumnExist(key) && _columnOrderStr.indexOf(key+",") != -1)
					{
						addList.push(key);
					}
				}
				
				if(addList.length > 0)
				{
					for (var j:int = 0; j < addList.length; j++)
					{
						var dataField:String = addList[j];
						
						var column:GridColumn = new GridColumn();
						column.headerText = dataField;
						column.dataField = dataField;
						for (var a:int = 0; a < _columnOrder.length; a++) {
							if (_columnOrder[a].indexOf(dataField) != -1) {
								var tempStr:String = _columnOrder[a];
								column.width = Number(tempStr.substring(tempStr.indexOf(",") + 1));
							}
						}
						
						_columns.addItem(column);
					}
					
					if(_columns.sort == null) {
						_columns.sort = new Sort();
						_columns.sort.compareFunction = sortOnConfigOrder;
						
						_columns.refresh();
					}
				}
			}
			
			/**
			 * This function is used to sort the alert textual datagrid 
			 * horizontally using the order the header text appear in the config file.
			 */ 
			private function sortOnConfigOrder(col1:GridColumn, col2:GridColumn, fields:Array=null):int
			{
				if(com.deleidos.rtws.commons.util.StringUtils.isEmpty(_columnOrderStr)) {
					return 0;
				}
				
				if(_columnOrderStr.indexOf(col1.headerText) > _columnOrderStr.indexOf(col2.headerText)) 
				{
					return 1;
				} 
				else if(_columnOrderStr.indexOf(col1.headerText) < _columnOrderStr.indexOf(col2.headerText)) 
				{
					return -1;
				} 
				else 
				{
					return 0;
				}
			}
			
			/**
			 * Given a data field, determine if the column exist in the
			 * alert textual data grid.
			 */ 
			private function doesColumnExist(dataField:String):Boolean
			{
				for (var index:int = 0; index < _columns.length; index++)
				{
					var gridColumn:GridColumn = (_columns.getItemAt(index) as GridColumn);
					
					if(gridColumn.dataField == dataField)
					{
						return true;
					}
				}
				
				return false;
			}
			
			private function onDataGridSelectionChange(event:GridSelectionEvent):void {
				var newSelectedItem:Object = alertsDataGrid.selectedItem;
				
				if(newSelectedItem !== _lastSelectedItem) {
					if(_lastSelectedItem != null && _lastSelectedItem.hasOwnProperty(AlertDataModel.ORIGINAL_ALERT_PROP_NAME)) {
						var alertToDeselect:Alert = (_lastSelectedItem[AlertDataModel.ORIGINAL_ALERT_PROP_NAME] as Alert);
						if(alertToDeselect != null) {
							dispatchEvent(new AlertDataCommandEvent(AlertDataCommandEvent.DESELECTED, alertToDeselect));
						}
					}
					
					if(newSelectedItem != null && newSelectedItem.hasOwnProperty(AlertDataModel.ORIGINAL_ALERT_PROP_NAME)) {
						var alertToSelect:Alert = (newSelectedItem[AlertDataModel.ORIGINAL_ALERT_PROP_NAME] as Alert);
						if(alertToSelect != null) {
							dispatchEvent(new AlertDataCommandEvent(AlertDataCommandEvent.SELECTED, alertToSelect));
						}
					}
				}
				
				_lastSelectedItem = newSelectedItem;
			}
			
			private function scrollToCurrentSelection():void {
				var selectedIndices:Vector.<int> = alertsDataGrid.selectedIndices;
				
				var maxRowIndex:int = -1;
				if(selectedIndices != null) {
						for(var index:int=0; index < selectedIndices.length; index++) {
							maxRowIndex = Math.max(maxRowIndex, selectedIndices[index]);
						}
				}
				
				if(maxRowIndex >= 0 && maxRowIndex <= _alerts.length) {
					alertsDataGrid.ensureCellIsVisible(maxRowIndex);
				}
			}
			
			private function onDataGridResize():void {
				if(_columns != null && _columns.length > 0) {
					// Work around to resize the final column to fill up the available space.  Flex bug
					(_columns.getItemAt(_columns.length - 1) as GridColumn).width = NaN;
				}
			}
			
			private function setStateWrtAlerts():void {
				if(_alerts != null && _alerts.length > 0) {
					if(StringUtils.isBlank(_columnOrderStr)) {
						setStatusMsg(new StatusMessage(StatusType.PROGRESS, "Please wait ... Loading Spreadsheet Configuration"), msgOnlyState);
					}
					else {
						setStatusMsg(null, dataDisplayState);
					}
				}
				else {
					setStatusMsg(new StatusMessage(StatusType.INFO, "No Data To Display.  Make sure you're subscribed to one or more alerts and please wait."), msgOnlyState);
				}
			}
			
			private function setStatusMsg(statusMsg:StatusMessage, newState:State=null):void {
				_currStatusMsg = statusMsg;
				
				if(newState != null)
				{
					this.currentState = newState.name;
				}
			}
		]]>
	</fx:Script>

</s:Group>

