<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		   xmlns:s="library://ns.adobe.com/flex/spark"
		   xmlns:mx="library://ns.adobe.com/flex/mx"
		   xmlns:googlemap="com.deleidos.rtws.alertviz.googlemap.*"
		   xmlns:controls="com.deleidos.rtws.alertviz.googlemap.controls.*"
		   width="100%" height="100%" xmlns:component="com.deleidos.rtws.commons.view.component.*">

	<fx:Script source="controls/Color.as" />	
	<fx:Script source="controls/Comment.as"/>
	<fx:Script source="controls/Follow.as"/>
	<fx:Script source="controls/InfoWindows.as"/>
	<fx:Script source="controls/Toggle.as"/>
	<fx:Script source="draw/Lobs.as"/>
	<fx:Script source="draw/Paths.as"/>
	<fx:Script source="draw/Points.as"/>
	<fx:Script source="draw/Aoi.as"/>
	<fx:Script source="draw/Ellipse.as"/>
	<fx:Script source="ImportsAndConstants.as"/>
	<fx:Script source="Setup.as"/>
	<fx:Script source="MyAlert.as"/>
	
	<s:states>
		<s:State id="mapLoadingState" name="rtws_mapLoading" />
		<s:State id="noToolsState" name="rtws_noTools" stateGroups="rtws_mapLoaded" />
		<s:State id="toolsState" name="rtws_tools" stateGroups="rtws_mapLoaded" />
	</s:states>
	
	<!--
		The key property is the google maps api key. We don't embed the key here instead
		the key will be located in flashvars property in the html file.
	-->
	<maps:Map xmlns:maps="com.google.maps.*"
			  id="map" top="0" right="0" bottom="0" left="0"
				key="{_apiKey}"
				sensor="{_sensorEnabled ? 'true' : 'false'}"
			  mapevent_mapready="configureMap();onMapReady(event);"
				includeIn="rtws_mapLoaded" />
	
	<!--
		These controls are placed on top of google maps. These controls provide alerviz 
		specific functions.
	-->
	<s:VGroup top="5" right="5" horizontalAlign="right"  includeIn="rtws_mapLoaded">
		<component:StyleableImage styleName="mapTools tiny" toolTip.rtws_noTools="Show Map Tools" toolTip.rtws_tools="Hide Map Tools" buttonMode="true" click="onToggleToolsClick();" />
		
		<s:VGroup width="100%" visible="false" visible.rtws_tools="true">
			<s:HGroup width="100%" verticalAlign="middle">
				<mx:PopUpButton id="commentPop" width="140" height="20" label="Delete Comment" enabled="true" fontWeight="bold"
												click="commentPop_clickHandler(event)" creationComplete="initCommentPop()"/>
				<mx:PopUpButton id="aoiPop" width="115" height="20" label="Draw AoI" enabled="true" fontWeight="bold"
												click="aoiPop_clickHandler(event)" creationComplete="initAoiPop()"/>
			</s:HGroup>
			<s:HGroup width="100%" verticalAlign="middle">
				<mx:PopUpButton id="togglePop" width="140" height="20" maxWidth="200" label="Toggle Markers" enabled="true" fontWeight="bold"
												click="togglePop_clickHandler(event)" creationComplete="initTogglePop()"/>
				<mx:Button id="followBtn" width="115" height="20" label="Follow"
									 enabled="true" fontWeight="bold" click="followBtn_clickHandler(event)"/>
			</s:HGroup>
			<mx:TextArea id="inputArea" width="100%" height="60" editable="false" enabled="true"
									 fontSize="12" fontWeight="bold" />
			<s:HGroup width="100%" horizontalAlign="right">
				<mx:Button id="doneInputBtn" width="50" textAlign="center" height="20" label="Done" enabled="true" fontSize="10"
									 fontWeight="bold" visible="false" click="doneInput_clickHandler(event)" />
			</s:HGroup>
		</s:VGroup>
	</s:VGroup>
	
	<fx:Script>
		<![CDATA[
			import com.google.maps.controls.MapTypeControlOptions;
			
			[Bindable] private var _apiKey:String;
			private var _apiKeyDirty:Boolean = false;
			[Bindable] private var _sensorEnabled:Boolean;
			private var _sensorEnabledDirty:Boolean = false;
			
			private function configureMap():void {
				//enables zooming
				map.enableScrollWheelZoom();
				map.enableContinuousZoom();
				
				//puts the control for the map type on the map
				var mapTypePickerControl:MapTypeControl = new MapTypeControl();
				mapTypePickerControl.setControlPosition(new ControlPosition(ControlPosition.ANCHOR_TOP_RIGHT, 42, 12));
				this.map.addControl(mapTypePickerControl);
				
				//puts the control for navigation on the map;
				var navOptions:NavigationControlOptions = new NavigationControlOptions(
					{
						hasScrollTrack:true,
						position: new ControlPosition(ControlPosition.ANCHOR_TOP_LEFT, 5, ControlPosition.AUTO_ALIGN_Y)
					});
				var navControl:NavigationControl = new NavigationControl(navOptions);
				this.map.addControl(navControl);
				
				this.map.setCenter(US_CENTER_POINT, US_ZOOM_LEVEL);
				
				this.dispatchEvent(new MapViewEvent(MapViewEvent.MAP_READY, null));
			}
			
			private function onToggleToolsClick():void {
				toggleTools();
			}
			
			private function toggleTools():void {
				if(this.currentState == noToolsState.name) {
					this.currentState = toolsState.name;
				}
				else {
					this.currentState = noToolsState.name;
				}
			}
			
			public function set apiKey(value:String):void {
				this._apiKey = value;
				this._apiKeyDirty = true;
				this.invalidateProperties();
			}
			
			public function set sensorEnabled(value:Boolean):void {
				this._sensorEnabled = value;
				this._sensorEnabledDirty = true;
				this.invalidateProperties();
			}
			
			override protected function commitProperties():void
			{
				if(_apiKeyDirty && _sensorEnabledDirty) {
					if(this.currentState == mapLoadingState.name) {
						// Map is uninitialized and settings are now available.  Setting state to create map.
						this.currentState = noToolsState.name;
					}
					
					_apiKeyDirty = false;
					_sensorEnabledDirty = false;
				}
				super.commitProperties();
			}
		]]>
	</fx:Script>
</s:Group>