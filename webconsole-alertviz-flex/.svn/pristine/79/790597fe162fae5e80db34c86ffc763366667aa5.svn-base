<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="600" height="500" 
		 showCloseButton="true" creationComplete="init();" horizontalScrollPolicy="on" verticalScrollPolicy="off"
		 >
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<mx:DataGrid id="nodeDataGrid" dataProvider="{dataProvider}" 
				 width="100%" height="100%"
				 color="0x000000" textAlign="center"
				 horizontalScrollPolicy="off" verticalScrollPolicy="on"/>
	
	<fx:Script>
		<![CDATA[
			import com.deleidos.rtws.alertviz.expandgraph.events.NodeEvent;
			import com.deleidos.rtws.alertviz.expandgraph.graph.Node;
			import com.deleidos.rtws.alertviz.models.Alert;
			import com.deleidos.rtws.alertviz.utils.FieldNameMinimizer;
			import com.deleidos.rtws.alertviz.utils.FlattenedObject;
			
			import mx.collections.ArrayCollection;
			import mx.collections.XMLListCollection;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.events.CloseEvent;
			
			[Bindable]
			public var dataProvider:ArrayCollection= new ArrayCollection();
			
			private var _node:Node;
			private var _init:Boolean = false;
			private var _nodeID:String;
			private var _alertData:Vector.<Object>;
			private var _dataMapping:Dictionary = new Dictionary(); //maps the alert data to data provider items
			
			public function init():void{
				_init = true;
				populateDataGrid();
			}
			
			public function get node():Node{
				return _node;
			}
			
			public function set node(value:Node):void{
				if(_node != null){
					_node.removeEventListener(NodeEvent.ADD_ITEM, onNodeAddItem);
					_node.removeEventListener(NodeEvent.ADD_ITEM, onNodeDeleteItem);
				}
				
				if(value == null){
					_node = null;
					_nodeID = null;
					_alertData = null;
				}else{
					_node = value;
					_nodeID = value.key;
					_alertData = value.data;
					this.title = value.properties.label.value;
					_node.addEventListener(NodeEvent.ADD_ITEM, onNodeAddItem);
					_node.addEventListener(NodeEvent.DELETE_ITEM, onNodeDeleteItem);
				}
				populateDataGrid();
			}
			
			private function populateDataGrid():void{
				if(_init){
					dataProvider.removeAll();
					var columns:FieldNameMinimizer = new FieldNameMinimizer();
					
					var obj:Object;
					for each(obj in _alertData){
						var flat:FlattenedObject = new FlattenedObject(obj.record);
						_dataMapping[obj] = flat;
						for(var key:String in flat)
							columns.add(key);
						dataProvider.addItem(flat);
					}
					
					var columnData:Array = columns.getFieldNames();
					var dataGridColumns:Array = new Array();
					var estimatedWidth:TextField = new TextField();
					var totalWidth:Number = 0;
					for each(obj in columnData){
						var column:DataGridColumn = new DataGridColumn();
						column.dataField = obj[FieldNameMinimizer.FIELD_NAME];
						column.headerText = obj[FieldNameMinimizer.DISPLAY_NAME];
						
						estimatedWidth.text = column.headerText;
						column.width = (estimatedWidth.textWidth * (4/3)) + 20;
						totalWidth += column.width;
							
						column.setStyle("textAlign", "center");
						dataGridColumns.push(column);
					}
					
					dataGridColumns.sort(sortOnHeaderField);
					
					//the data grid doesn't work very well with it's own scroll bars,
					//so we adjust it's width so our view's scrollbars are adjusted
					nodeDataGrid.width = totalWidth < width ? width : totalWidth;
					nodeDataGrid.columns = dataGridColumns;
				}
			}
			
			private function sortOnHeaderField(col1:DataGridColumn, col2:DataGridColumn):Number 
			{			
				if(col1.headerText > col2.headerText) 
				{
					return 1;
				} 
				else if(col1.headerText < col2.headerText) 
				{
					return -1;
				} 
				else 
				{
					return 0;
				}
			}
			
			private function onNodeAddItem(event:NodeEvent):void{
				var flat:FlattenedObject = new FlattenedObject(event.item.record);
				_dataMapping[event.item] = flat;
				dataProvider.addItem(flat);
				this.title = node.properties.label.value;
				//TODO: Adjust/add columns based on added items
			}
			
			private function onNodeDeleteItem(event:NodeEvent):void{
				for(var i:int = 0; i < dataProvider.length; i++){
					if(dataProvider[i] == _dataMapping[event.item]){
						dataProvider.removeItemAt(i);
						break;
					}
				}
				this.title = node.properties.label.value;
				
				if(dataProvider.length == 0)
					dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
				
				//TODO: Adjust/add columns based on deleted items
			}
			

		]]>
	</fx:Script>
	
	
</mx:TitleWindow>
