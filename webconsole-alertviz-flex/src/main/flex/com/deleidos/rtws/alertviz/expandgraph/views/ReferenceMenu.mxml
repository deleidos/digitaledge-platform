<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:renderers="com.deleidos.rtws.alertviz.expandgraph.views.renderers.*"
		 width="400" height="300" 
		 horizontalAlign="center" verticalAlign="middle" 
		 horizontalScrollPolicy="off"
		 verticalScrollPolicy="off"
		 borderStyle="solid"
		 creationComplete="init();">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<mx:TextInput id="quickFind" width="380" change="onTextChange(event)"/>
	<mx:Tree width="380" id="referenceListUI" height="100%" allowMultipleSelection="false" change="onListChange(event)" folderClosedIcon="{null}" folderOpenIcon="{null}" defaultLeafIcon="{null}"/>
	
	<mx:HBox width="380">
		<mx:Button label="Enter" width="50%" click="onDone(event)" enabled="{saveable}"/>
		<mx:Button label="Cancel" width="50%" click="onCancel(event)"/>
	</mx:HBox>
	
	<fx:Script>
		<![CDATA[
			import com.deleidos.rtws.alertviz.expandgraph.graph.evaluable.*;
			import com.deleidos.rtws.alertviz.expandgraph.graph.evaluable.functions.FunctionMapper;
			import com.deleidos.rtws.alertviz.expandgraph.graph.evaluable.functions.IFunction;
			import com.deleidos.rtws.alertviz.expandgraph.views.renderers.FunctionMenuItemRenderer;
			import com.deleidos.rtws.alertviz.models.repository.FieldData;
			import com.deleidos.rtws.alertviz.models.repository.ModelFieldData;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ISort;
			import mx.collections.Sort;
			import mx.collections.SortField;
			import mx.collections.XMLListCollection;
			import mx.events.CloseEvent;
			import mx.events.ListEvent;
			
			public var returnValue:ObjectReference;
			
			private var _fieldData:ArrayCollection = new ArrayCollection();
			public function set fieldData(value:ArrayCollection):void{
				if(value == null) _fieldData = new ArrayCollection();
				else _fieldData = value;
				refresh();
			}
			public function get fieldData():ArrayCollection{ return _fieldData; }
			
			[Bindable]
			private var saveable:Boolean = false;
			
			private var _init:Boolean = false;
			
			private function init():void{
				this.addEventListener(KeyboardEvent.KEY_UP, onKeyUp);
				returnValue = null;
				_init = true;
				refresh();
			}
			
			protected function onTextChange(event:Event):void {
				referenceListUI.selectedIndex = -1;
				_fieldData.refresh();
				forceRedraw();
				
				var tmp:Boolean = _fieldData.length == 1;
				if(tmp){
					var field:FieldData = _fieldData.getItemAt(0) as FieldData;
					while(!field.isLeaf){
						if(field.children.length == 1){
							field = field.children[0];
						}else{
							tmp = false;
							break;
						}
					}
				}
				saveable = tmp;
			}
			
			protected function filter(item:Object):Boolean{
				var field:FieldData = item as FieldData;
				if(field.isLeaf){
					//child node
					return field.name.toLowerCase().indexOf(quickFind.text.toLowerCase()) == 0 || field.fullName().toLowerCase().indexOf(quickFind.text.toLowerCase()) == 0;
				}else{
					//parent node
					field.children.filterFunction = filter;
					field.children.refresh();
					return field.children.length != 0;
				}
			}
			
			protected function labelFunction(item:Object):String{
				return item != null && item is FieldData ? item.name : "[No Value]";
			}
			
			protected function refresh():void{
				if(_init){
					_fieldData.filterFunction = filter;
					_fieldData.refresh();
					
					referenceListUI.dataProvider = _fieldData;
					referenceListUI.labelFunction = labelFunction;
				}
			}
			
			protected function onListChange(event:Event):void
			{
				if(referenceListUI.selectedIndex == -1){
					quickFind.text = "";
					_fieldData.refresh();
				}else{
					var field:FieldData = referenceListUI.selectedItem as FieldData;
					quickFind.text = field.fullName();
					saveable = field.isLeaf;
				}
			}
			
			protected function onKeyUp(event:KeyboardEvent):void{
				if(saveable && event.keyCode == Keyboard.ENTER){
					onDone();
				}else if(event.keyCode == Keyboard.ESCAPE)
					onCancel();
			}
			
			protected function onDone(event:Event = null):void{
				if(referenceListUI.selectedIndex == -1){
					var leafField:FieldData = _fieldData.getItemAt(0) as FieldData;
					while(!leafField.isLeaf)
						leafField = leafField.children[0];
					returnValue = new ObjectReference(leafField.fullName());
				}else
					returnValue = new ObjectReference((referenceListUI.selectedItem as FieldData).fullName());
				
				dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
			}
			
			protected function onCancel(event:Event = null):void{
				dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
			}
			
			protected function forceRedraw():void
			{
				var scrollPosition:Number = referenceListUI.verticalScrollPosition;
				var openItems:Object = referenceListUI.openItems;
				referenceListUI.dataProvider = _fieldData;
				referenceListUI.openItems = openItems;
				referenceListUI.invalidateList();
				referenceListUI.validateNow();
				referenceListUI.verticalScrollPosition = scrollPosition;
			}
			
		]]>
	</fx:Script>
</mx:VBox>
