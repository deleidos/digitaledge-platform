<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" class="HelpTopic" data-mc-search-type="Stem" data-mc-help-system-file-name="Default.xml" data-mc-path-to-help-system="../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-medium="non-print" data-mc-toc-path="Sample Code">
    <!-- saved from url=(0016)http://localhost -->
    <head>
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Creating a data sink</title>
        <link href="../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../resources/stylesheets/leidos_sdk.css" rel="stylesheet" />
        <script src="../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <h2 class="Heading2"><a name="kanchor12"></a>Creating a data sink</h2>
        <p>Data sinks receive pipeline-processed data for storage, alerting, or post-processing. <span class="VariablesProductName">DigitalEdge</span> comes with many build-in user-configurable data sinks such as HBase, internal or external Hive, Lucene, MongoDB, and Alerting.  If the built-in data sinks do not meet your needs, use the <span class="VariablesProductName">DigitalEdge</span> SDK to write a custom data sink that can be plugged into the <span class="VariablesProductName">DigitalEdge</span> framework and made available through the <span class="VariablesProductName">DigitalEdge</span> setup tools.</p>
        <p>To create a data sink, you must write a class that extends the <code>com.deleidos.rtws.core.framework.processor.AbstractDataSink</code> class. The <code>AbstractDataSink</code> class has a public subclass of <code>FlushCounter</code>.  The key methods for these classes are described below.</p>
        <p class="HeadingLevel3NonTOC">AbstractDataSink</p>
        <p><code>processInternal(net.sf.json.JSONObject)</code>: Called to process a JSON object and store it in the data sink. This method is meant for internal use only; any implementation of the data sink should call <code>AbstractProcessor process(netsf.json.JSONOBJECT)</code> which is inherited as described below.</p>
        <p class="HeadingLevel3NonTOC">FlushCounter</p>
        <p>Methods count records and bytes processed, and verify the accuracy of the count.</p>
        <p>The <code>AbstractDataSink</code> class extends the <code>com.deleidos.rtws.core.framework.AbstractProcessor</code>, implements the <code>com.deleidos.rtws.core.framework.DataSink</code> interface, and through inheritance also implements the <code>com.deleidos.rtws.common.util.initializable</code> interface as outlined below.</p>
        <p class="HeadingLevel3NonTOC">AbstractProcessor</p>
        <p><code>process(net.sf.json.JSONObject)</code>: Called to process a record that comes in the format of a JSON object.  This is the method that should be invoked to process records, not <code>AbstractDataSink.processInternal(net.sf.json.JSONObject)</code>, as it provides a check to make sure the processor is enabled and the event is eligible for processing.</p>
        <p class="HeadingLevel3NonTOC">DataSink</p>
        <p><code>flush()</code>: Called to flush any cached records to the data sink. This method can be configured to flush after a specified amount of bytes, records, or time between records, via other methods of the <code>DataSink </code>interface.</p>
        <p class="HeadingLevel3NonTOC">Initializable</p>
        <p><code>initialize()</code>: Called to set the data sink up before use. Used to create the connection to the data sink, initialize resources, etc.</p>
        <p><code>dispose()</code>: Called when use of the data sink is complete. Used to clean up connections and resources created in <code>initialize()</code>.</p>
        <p>The following sample is a simple text file data sink. It saves all records received by the system into the text file:</p>
        <p class="Indent"><code>/usr/local/etc/datasinkFile.txt</code>
        </p>
        <p>in a JSON string format. In addition to the code for the data sink, the <code>JsonFileDataSinkTest.java</code> sample is a test driver for testing the data sink locally. The test driver runs locally as a JUnit test.</p>
        <p class="Note">To integrate a data sink with <span class="VariablesProductName">DigitalEdge</span>, contact a <span class="VariablesProductName">DigitalEdge</span> Support Engineer to assign it to a process group.</p>
        <p class="Front">&#160;</p>
        <p class="Front">&#160;</p>
        <p class="FooterNonPrint">For  Technical Support, contact: <span class="VariablesEmail">DigitalEdgeSupport@Leidos.com</span></p>
        <p class="FooterNonPrint">To submit ideas or feedback, go to https://www9.v1ideas.com/digitaledge/welcome</p>
        <p class="FooterNonPrint">Â© <span class="VariablesCompanyName">Leidos</span>. All rights reserved</p>
    </body>
</html>