<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" class="HelpTopic" data-mc-search-type="Stem" data-mc-help-system-file-name="Default.xml" data-mc-path-to-help-system="../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-medium="non-print" data-mc-toc-path="Sample Code|Creating a data sink">
    <!-- saved from url=(0016)http://localhost -->
    <head>
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Sample data sink test</title>
        <link href="../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../resources/stylesheets/leidos_sdk.css" rel="stylesheet" />
        <script src="../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <h3 class="Heading3"><a name="kanchor14"></a>JsonFileDataSinkTest.java</h3><pre xml:space="preserve">
package &lt;your package&gt;;

import java.io.BufferedReader;
import java.io.FileReader;
import junit.framework.TestCase;
import net.sf.json.JSONObject;
import net.sf.json.JSONSerializer;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import com.deleidos.rtws.commons.exception.InitializationException;

/**
 * A driver class for testing the JsonDataSink.
 * 
 * The class is in the proper format to be run as a JUnit test.
 */
public class JsonFileDataSinkTest extends TestCase {
	
	private static JsonFileDataSink dataSink = new JsonFileDataSink();	// An instance of the data sink
	private String baseDir;							// A string to the user's base directory
	private boolean safeToTest = false;			// A flag to determine whether the test is safe to run
	
	/**
	 * Ran to clean up after the JUnit test.  In this example, we wnat to dispose of the data sink
	 */
	@After
	public void cleanUp() {
		// Clean up the data sink
		dataSink.dispose();
	}
	
	/**
	 * Ran to set up before the JUnit test.  In this example, we need to choose the find the
	 * base directory since that is where we have the input data file stored.  In addition,
	 * we need to initialize the data sink.
	 */
	@Before
	public void setUp() {		
		// Get the user's base directory
		if (System.getProperty("basedir") == null) {
			System.setProperty("basedir", System.getProperty("user.dir"));
		}
		
		baseDir = System.getProperty("basedir");
		
		if (baseDir == null) {
			System.out.println("ERROR: Need to set basedir in system properties at startup time");
		}
		else {
			baseDir = System.getProperty("user.dir");
		}
		System.out.println("INFO: baseDir = " + baseDir);
		
		// Initialize the data sink
		try {
			System.out.println("INFO: Initializing data sink"); 
			dataSink.initialize();
			safeToTest = true;
			System.out.println("INFO: Data sink successfully initialized");
		}
		catch(InitializationException e) {
			// The data sink failed to initialize, flag that we do
			// not want to continue testing
			safeToTest = false;
			System.out.println("ERROR: " + e.getMessage());
		}		
	}
	
	@Test
	public void testProcessInternal() throws Exception {
		// Check if the test is safe to run or if the data sink failed to initialize
		if(safeToTest) {
			BufferedReader testDataIn = null;
			
			try {
				// Open the file to read the input data from.  This file
				// is just text file with a JSON string on each line.
				System.out.println("INFO: new dir:");
				testDataIn = new BufferedReader(new FileReader(baseDir
						+ "/src/resource/test.json"));
	
				// Work through the file reading each line of text
				String line;
				while ((line = testDataIn.readLine()) != null) {
					// Convert each line of text into a JSONObject record
					JSONObject record = (JSONObject) JSONSerializer.toJSON(line);
					System.out.println("INFO: Read record \"" + record + "\"");
					
					// Process the the record. Notice here that we do not call the 
					// processInternal(JSONObject record, FlushCounter counter) function
					// of the Data Sink.  Instead we just call process(JSONObject record)
					// function.  That is because the processInternal is only used internally
					// by the data sink in conjunction with the data sink's FlushCounter.
					dataSink.process(record);
					System.out.println("INFO: Record written to data sink");
				}
			} finally {
				// Close the test data file
				testDataIn.close();
			}
		}
		else {
			// Log that the test did not run
			System.out.println("INFO: testProcessInternal did not run since data sink failed to 
     initialize");			
		}
	}
}</pre>
        <p class="Front">&#160;</p>
        <p class="Front">&#160;</p>
        <p class="FooterNonPrint">For  Technical Support, contact: <span class="VariablesEmail">DigitalEdgeSupport@Leidos.com</span></p>
        <p class="FooterNonPrint">To submit ideas or feedback, go to https://www9.v1ideas.com/digitaledge/welcome</p>
        <p class="FooterNonPrint">Â© <span class="VariablesCompanyName">Leidos</span>. All rights reserved</p>
    </body>
</html>