<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:renderers="com.deleidos.rtws.alertviz.expandgraph.views.renderers.*"
		 width="400" height="300" 
		 horizontalAlign="center" verticalAlign="middle" 
		 horizontalScrollPolicy="off"
		 verticalScrollPolicy="off"
		 borderStyle="solid"
		 creationComplete="init();">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<mx:TextInput id="quickFind" width="380" change="onTextChange(event)"/>
	<mx:List width="380" id="functionListUI" height="100%" allowMultipleSelection="false" change="onListChange(event)"/>

	<mx:HBox width="380">
		<mx:Button label="Enter" width="50%" click="onDone(event)" enabled="{saveable}"/>
		<mx:Button label="Cancel" width="50%" click="onCancel(event)"/>
	</mx:HBox>
	
	<fx:Script>
		<![CDATA[
			import com.deleidos.rtws.alertviz.expandgraph.graph.evaluable.*;
			import com.deleidos.rtws.alertviz.expandgraph.graph.evaluable.functions.FunctionMapper;
			import com.deleidos.rtws.alertviz.expandgraph.graph.evaluable.functions.IFunction;
			import com.deleidos.rtws.alertviz.expandgraph.graph.evaluable.functions.nonstateful.BaseFunction;
			import com.deleidos.rtws.alertviz.expandgraph.views.renderers.FunctionMenuItemRenderer;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ISort;
			import mx.collections.Sort;
			import mx.collections.SortField;
			import mx.events.CloseEvent;
			import mx.events.ListEvent;
			
			public var returnValue:Class;
			
			[Bindable]
			private var allData:ArrayCollection = new ArrayCollection();
			
			[Bindable]
			private var saveable:Boolean = false;
			
			private function init():void{
				//populates the list with any data it needs to allow the user
				//to select a function and instantiate it
				var functions:Object = FunctionMapper.getMap();
				for(var funcName:String in functions){
					var data:Object = new Object();
					data["functionName"] = funcName;
					data["functionClass"] = functions[funcName][0];
					data["functionUsage"] = functions[funcName][1];
					if(funcName != BaseFunction.NAME) //we want to ignore the base function
						allData.addItem(data); 
				}
				
				var sort:ISort = new Sort();
				sort.fields = [new SortField("functionName",true)];
				allData.sort = sort;
				allData.refresh();
				
				allData.filterFunction = filter;
				
				functionListUI.dataProvider = allData;
				functionListUI.itemRenderer = new ClassFactory(FunctionMenuItemRenderer);
				
				this.addEventListener(KeyboardEvent.KEY_UP, onKeyUp);
				returnValue = null;
			}
			
			//when the user changes the text, update the list
			private function onTextChange(event:Event):void {
				functionListUI.selectedIndex = -1;
				allData.refresh();
				saveable = allData.length == 1;
			}
			
			//makes the list only display functions that begin with the text in the input text box
			private function filter(item:Object):Boolean{
				return (item["functionName"] as String).toLowerCase().indexOf(quickFind.text) == 0;
			}
			
			private function onListChange(event:Event):void
			{
				if(functionListUI.selectedIndex == -1){
					quickFind.text = "";
					allData.refresh();
					saveable = false;
				}else{
					quickFind.text = functionListUI.selectedItem["functionName"];
					saveable = true;
				}
			}
			
			//some convenience shortcuts
			private function onKeyUp(event:KeyboardEvent):void{
				if(saveable && event.keyCode == Keyboard.ENTER){
					onDone();
				}else if(event.keyCode == Keyboard.ESCAPE)
					onCancel();
			}
			
			
			//store the currently selected function so other resources
			//can instantiate it
			private function onDone(event:Event = null):void{
				if(functionListUI.selectedIndex == -1)
					returnValue = allData.getItemAt(0)["functionClass"];
				else
					returnValue = functionListUI.selectedItem["functionClass"];
				
				dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
			}
			
			private function onCancel(event:Event = null):void{
				dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
			}
			
		]]>
	</fx:Script>
	
	
</mx:VBox>
