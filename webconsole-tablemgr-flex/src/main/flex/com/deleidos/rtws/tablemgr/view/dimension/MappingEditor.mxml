<?xml version="1.0" encoding="utf-8"?>
<!--

                                     Apache License
                               Version 2.0, January 2004
                            http://www.apache.org/licenses/

       TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

       1. Definitions.

          "License" shall mean the terms and conditions for use, reproduction,
          and distribution as defined by Sections 1 through 9 of this document.

          "Licensor" shall mean the copyright owner or entity authorized by
          the copyright owner that is granting the License.

          "Legal Entity" shall mean the union of the acting entity and all
          other entities that control, are controlled by, or are under common
          control with that entity. For the purposes of this definition,
          "control" means (i) the power, direct or indirect, to cause the
          direction or management of such entity, whether by contract or
          otherwise, or (ii) ownership of fifty percent (50%) or more of the
          outstanding shares, or (iii) beneficial ownership of such entity.

          "You" (or "Your") shall mean an individual or Legal Entity
          exercising permissions granted by this License.

          "Source" form shall mean the preferred form for making modifications,
          including but not limited to software source code, documentation
          source, and configuration files.

          "Object" form shall mean any form resulting from mechanical
          transformation or translation of a Source form, including but
          not limited to compiled object code, generated documentation,
          and conversions to other media types.

          "Work" shall mean the work of authorship, whether in Source or
          Object form, made available under the License, as indicated by a
          copyright notice that is included in or attached to the work
          (an example is provided in the Appendix below).

          "Derivative Works" shall mean any work, whether in Source or Object
          form, that is based on (or derived from) the Work and for which the
          editorial revisions, annotations, elaborations, or other modifications
          represent, as a whole, an original work of authorship. For the purposes
          of this License, Derivative Works shall not include works that remain
          separable from, or merely link (or bind by name) to the interfaces of,
          the Work and Derivative Works thereof.

          "Contribution" shall mean any work of authorship, including
          the original version of the Work and any modifications or additions
          to that Work or Derivative Works thereof, that is intentionally
          submitted to Licensor for inclusion in the Work by the copyright owner
          or by an individual or Legal Entity authorized to submit on behalf of
          the copyright owner. For the purposes of this definition, "submitted"
          means any form of electronic, verbal, or written communication sent
          to the Licensor or its representatives, including but not limited to
          communication on electronic mailing lists, source code control systems,
          and issue tracking systems that are managed by, or on behalf of, the
          Licensor for the purpose of discussing and improving the Work, but
          excluding communication that is conspicuously marked or otherwise
          designated in writing by the copyright owner as "Not a Contribution."

          "Contributor" shall mean Licensor and any individual or Legal Entity
          on behalf of whom a Contribution has been received by Licensor and
          subsequently incorporated within the Work.

       2. Grant of Copyright License. Subject to the terms and conditions of
          this License, each Contributor hereby grants to You a perpetual,
          worldwide, non-exclusive, no-charge, royalty-free, irrevocable
          copyright license to reproduce, prepare Derivative Works of,
          publicly display, publicly perform, sublicense, and distribute the
          Work and such Derivative Works in Source or Object form.

       3. Grant of Patent License. Subject to the terms and conditions of
          this License, each Contributor hereby grants to You a perpetual,
          worldwide, non-exclusive, no-charge, royalty-free, irrevocable
          (except as stated in this section) patent license to make, have made,
          use, offer to sell, sell, import, and otherwise transfer the Work,
          where such license applies only to those patent claims licensable
          by such Contributor that are necessarily infringed by their
          Contribution(s) alone or by combination of their Contribution(s)
          with the Work to which such Contribution(s) was submitted. If You
          institute patent litigation against any entity (including a
          cross-claim or counterclaim in a lawsuit) alleging that the Work
          or a Contribution incorporated within the Work constitutes direct
          or contributory patent infringement, then any patent licenses
          granted to You under this License for that Work shall terminate
          as of the date such litigation is filed.

       4. Redistribution. You may reproduce and distribute copies of the
          Work or Derivative Works thereof in any medium, with or without
          modifications, and in Source or Object form, provided that You
          meet the following conditions:

          (a) You must give any other recipients of the Work or
              Derivative Works a copy of this License; and

          (b) You must cause any modified files to carry prominent notices
              stating that You changed the files; and

          (c) You must retain, in the Source form of any Derivative Works
              that You distribute, all copyright, patent, trademark, and
              attribution notices from the Source form of the Work,
              excluding those notices that do not pertain to any part of
              the Derivative Works; and

          (d) If the Work includes a "NOTICE" text file as part of its
              distribution, then any Derivative Works that You distribute must
              include a readable copy of the attribution notices contained
              within such NOTICE file, excluding those notices that do not
              pertain to any part of the Derivative Works, in at least one
              of the following places: within a NOTICE text file distributed
              as part of the Derivative Works; within the Source form or
              documentation, if provided along with the Derivative Works; or,
              within a display generated by the Derivative Works, if and
              wherever such third-party notices normally appear. The contents
              of the NOTICE file are for informational purposes only and
              do not modify the License. You may add Your own attribution
              notices within Derivative Works that You distribute, alongside
              or as an addendum to the NOTICE text from the Work, provided
              that such additional attribution notices cannot be construed
              as modifying the License.

          You may add Your own copyright statement to Your modifications and
          may provide additional or different license terms and conditions
          for use, reproduction, or distribution of Your modifications, or
          for any such Derivative Works as a whole, provided Your use,
          reproduction, and distribution of the Work otherwise complies with
          the conditions stated in this License.

       5. Submission of Contributions. Unless You explicitly state otherwise,
          any Contribution intentionally submitted for inclusion in the Work
          by You to the Licensor shall be under the terms and conditions of
          this License, without any additional terms or conditions.
          Notwithstanding the above, nothing herein shall supersede or modify
          the terms of any separate license agreement you may have executed
          with Licensor regarding such Contributions.

       6. Trademarks. This License does not grant permission to use the trade
          names, trademarks, service marks, or product names of the Licensor,
          except as required for reasonable and customary use in describing the
          origin of the Work and reproducing the content of the NOTICE file.

       7. Disclaimer of Warranty. Unless required by applicable law or
          agreed to in writing, Licensor provides the Work (and each
          Contributor provides its Contributions) on an "AS IS" BASIS,
          WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
          implied, including, without limitation, any warranties or conditions
          of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
          PARTICULAR PURPOSE. You are solely responsible for determining the
          appropriateness of using or redistributing the Work and assume any
          risks associated with Your exercise of permissions under this License.

       8. Limitation of Liability. In no event and under no legal theory,
          whether in tort (including negligence), contract, or otherwise,
          unless required by applicable law (such as deliberate and grossly
          negligent acts) or agreed to in writing, shall any Contributor be
          liable to You for damages, including any direct, indirect, special,
          incidental, or consequential damages of any character arising as a
          result of this License or out of the use or inability to use the
          Work (including but not limited to damages for loss of goodwill,
          work stoppage, computer failure or malfunction, or any and all
          other commercial damages or losses), even if such Contributor
          has been advised of the possibility of such damages.

       9. Accepting Warranty or Additional Liability. While redistributing
          the Work or Derivative Works thereof, You may choose to offer,
          and charge a fee for, acceptance of support, warranty, indemnity,
          or other liability obligations and/or rights consistent with this
          License. However, in accepting such obligations, You may act only
          on Your own behalf and on Your sole responsibility, not on behalf
          of any other Contributor, and only if You agree to indemnify,
          defend, and hold each Contributor harmless for any liability
          incurred by, or claims asserted against, such Contributor by reason
          of your accepting any such warranty or additional liability.

       END OF TERMS AND CONDITIONS

       APPENDIX: How to apply the Apache License to your work.

          To apply the Apache License to your work, attach the following
          boilerplate notice, with the fields enclosed by brackets "{}"
          replaced with your own identifying information. (Don't include
          the brackets!)  The text should be enclosed in the appropriate
          comment syntax for the file format. We also recommend that a
          file or class name and description of purpose be included on the
          same "printed page" as the copyright notice for easier
          identification within third-party archives.

       Copyright {yyyy} {name of copyright owner}

       Licensed under the Apache License, Version 2.0 (the "License");
       you may not use this file except in compliance with the License.
       You may obtain a copy of the License at

           http://www.apache.org/licenses/LICENSE-2.0

       Unless required by applicable law or agreed to in writing, software
       distributed under the License is distributed on an "AS IS" BASIS,
       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       See the License for the specific language governing permissions and
       limitations under the License.

-->
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
				 xmlns:s="library://ns.adobe.com/flex/spark" 
				 xmlns:mx="library://ns.adobe.com/flex/mx"
				 xmlns:rtws-common="com.deleidos.rtws.commons.view.component.*">
	
	<s:states>
		<s:State id="statusOnlyState" name="statusOnly" />
		<s:State id="progressState" name="progress" />
		<s:State id="normalState" name="normal" />
	</s:states>
	
	<s:layout>
		<s:VerticalLayout horizontalAlign="center" />
	</s:layout>
	
	<rtws-common:StatusMessageDisplay id="statusMsgDisplay" width="50%" statusMsg="{_currStatusMsg}" />
	
	<s:VGroup width="100%" height="100%" excludeFrom="statusOnly" visible.progress="false" includeInLayout.progress="false" gap="15">
		<s:VGroup width="100%">
			<s:HGroup width="100%" horizontalAlign="left" verticalAlign="middle">
				<rtws-common:StyleableIconButton styleName="toolBarButton showView" toolTip="Show Instructions" visible="{!_showInstructions}" includeInLayout="{!_showInstructions}"
									click="_showInstructions = !_showInstructions;" />
				<rtws-common:StyleableIconButton styleName="toolBarButton hideView" toolTip="Hide Instructions" visible="{_showInstructions}" includeInLayout="{_showInstructions}"
									click="_showInstructions = !_showInstructions;" />
				<s:Label styleName="heading" text="Instructions:" width="100%" textAlign="left"
								 buttonMode="true" toolTip="Click to show/hide the instructions" click="_showInstructions = !_showInstructions;"/>
			</s:HGroup>
			<s:RichText width="100%" height="100%" whiteSpaceCollapse="collapse" lineBreak="toFit"
									visible="{_showInstructions}" includeInLayout="{_showInstructions}"
									styleName="notes">
				<s:content><s:p>
						An Enrichment allows you to "enrich" your original data with additional values from a DB table.
						A matching enrichment record is found by using the data's natural key (one or
						more fields which uniquely describe a single record).
					</s:p>
					<s:p>
						When a matching record is found, all fields flagged as "Data" will be
						added to your final data record according to the rules specified in
						the record's associated data model.
					</s:p>
					<s:p>
						 In order to use a Dimension table in a system enrichment, you must first configure
						 the dimension cache and enrichment data.  This configuration tells the system how to:
					 </s:p>
					<s:list>
						<s:li>Construct and manage the in-memory cache</s:li>
						<s:li>Handle cache misses (No Matching DB row for the record)</s:li>
						<s:li>Enrich your data with additional data from Dimension tables.</s:li>
					</s:list>
				</s:content>
			</s:RichText>
		</s:VGroup>
		
		<s:HGroup width="100%">
			<s:VGroup width="50%" height="100%" horizontalAlign="left">
				<s:Label styleName="heading" text="Cache Settings:" />
				<s:Form height="100%" width="100%">
					<s:FormItem label="Load Strategy:" width="100%">
						<s:DropDownList id="initPolicyDropDown" width="100%"
														dataProvider="{DimensionInitPolicy.values()}"
														labelField="label" selectedItem="{_initPolicy}" />
						<s:helpContent>
							<s:Label text="?" toolTip="This setting dictates how the cache will initialize itself at enrichment startup.  This setting should balance start-up costs with the expense of cache misses util the cache has reached its max size." />
						</s:helpContent>
					</s:FormItem>
					<s:FormItem label="Max Rows in Cache:" width="100%">
						<s:TextInput id="maxRecordsTextInput" width="100%" restrict="0-9" text="{_maxRecordsTxt}" />
						<s:helpContent>
							<s:Label text="?" toolTip="The max number of Enrichment Records to keep in memory at once.  This setting should weigh the need for timely enrichments/system performance with the available resources on ingest nodes within a system." />
						</s:helpContent>
					</s:FormItem>
				</s:Form>
			</s:VGroup>
			<s:VGroup width="50%" height="100%" horizontalAlign="left">
				<s:Label styleName="heading" text="Enrichment Settings:" />
				<s:Form height="100%" width="100%">
					<s:FormItem label="Unknown Record Action:" width="100%">
						<s:DropDownList id="missPolicyDropDown" width="100%"
														dataProvider="{DimensionMissPolicy.values()}"
														labelField="label" selectedItem="{_missPolicy}"
														change="onMissPolicyChange();" />
						<s:helpContent>
							<s:Label text="?" toolTip="This setting dictates the action to take when a record is not found within the existing dimension table." />
						</s:helpContent>
					</s:FormItem>
					<s:FormItem label="Surrogate Key Sequence:" width="100%" visible="{_showSequenceUi}" includeInLayout="{_showSequenceUi}">
						<s:VGroup width="100%" height="100%">
							<s:DropDownList id="surrogateSequenceDropDown" width="100%" prompt="Choose a Sequence" dataProvider="{_availSequences}"
								selectedItem="{_surrogateSequence}" labelField="name" change="onSurrogateSequenceDropDownChange(event);" />
							<s:HGroup width="100%" verticalAlign="middle">
								<s:TextInput id="surrogateSequenceTextInput" width="100%" text="{_surrogateSequenceName}" change="onSurrogateSequenceTextInputChange(event);" />
								<rtws-common:StyleableIconButton styleName="toolBarButton create" label="Add" toolTip="Create a Sequence" click="onAddSequenceClick();"
									enabled="{StringUtils.isNotBlank(surrogateSequenceTextInput.text)}" />
							</s:HGroup>
						</s:VGroup>
						<s:helpContent>
							<s:Label text="?" toolTip="Enter a sequence to obtain new values for records inserted into the DB." />
						</s:helpContent>
					</s:FormItem>
				</s:Form>
			</s:VGroup>
		</s:HGroup>
		<s:VGroup width="100%" height="100%">
			<s:Label styleName="heading" text="Enrichment Data Config:" />
			<s:DataGrid width="100%" height="100%" selectionMode="none" doubleClickEnabled="false" editable="true" variableRowHeight="true"
									dataProvider="{_mappingDisplayItems}">
				<s:columns>
					<s:ArrayList>
						<s:GridColumn headerText="Enrichment Role" editable="true" rendererIsEditable="true" 
													itemRenderer="com.deleidos.rtws.tablemgr.view.dimension.DimRoleItemEditor" />
						<s:GridColumn headerText="DB Column Details" editable="false"
							itemRenderer="com.deleidos.rtws.tablemgr.view.dimension.FullColumnDetailsItemRenderer" />
						<s:GridColumn headerText="Enrichment Field Details" editable="true" rendererIsEditable="true"
							itemRenderer="com.deleidos.rtws.tablemgr.view.dimension.CacheFieldDetailsItemEditor" />
						<s:GridColumn headerText="{_defaultValueHeaderText}" dataField="defaultValue" editable="true" rendererIsEditable="true"
							itemRenderer="com.deleidos.rtws.tablemgr.view.dimension.DefaultValueItemRenderer"
							visible="{_showDefaultValueColumn}" />
					</s:ArrayList>
				</s:columns>
			</s:DataGrid>
		</s:VGroup>
		<s:HGroup width="100%" horizontalAlign="center">
			<s:Button label="Save" click="onSaveClick();" />
			<s:Button label="Reset" click="onResetClick();" />	
		</s:HGroup>
	</s:VGroup>
	
	<fx:Script>
		<![CDATA[
			import com.deleidos.rtws.commons.model.status.StatusMessage;
			import com.deleidos.rtws.commons.model.status.StatusType;
			import com.deleidos.rtws.commons.util.StringUtils;
			import com.deleidos.rtws.tablemgr.event.dimension.DimTableMappingEvent;
			import com.deleidos.rtws.tablemgr.event.sequence.SequenceStatusEvent;
			import com.deleidos.rtws.tablemgr.model.TableContext;
			import com.deleidos.rtws.tablemgr.model.db.Sequence;
			import com.deleidos.rtws.tablemgr.model.db.Table;
			import com.deleidos.rtws.tablemgr.model.dimension.DimensionFieldRole;
			import com.deleidos.rtws.tablemgr.model.dimension.DimensionInitPolicy;
			import com.deleidos.rtws.tablemgr.model.dimension.DimensionMissPolicy;
			import com.deleidos.rtws.tablemgr.model.dimension.cache.ICacheType;
			import com.deleidos.rtws.tablemgr.model.dimension.cache.json.JsonCacheTypes;
			import com.deleidos.rtws.tablemgr.model.map.DimensionFieldMapping;
			import com.deleidos.rtws.tablemgr.model.map.DimensionTableMapping;
			
			import mx.collections.ArrayCollection;
			import mx.collections.Sort;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			
			import spark.collections.SortField;
			import spark.events.IndexChangeEvent;
			
			[Bindable] private var _currStatusMsg:StatusMessage = null;
			
			[Bindable] private var _showInstructions:Boolean = false;
			
			private var _tableCtxt:TableContext;
			private var _tableData:Table;
			private var _isInitTableDataSet:Boolean = false;
			private var _isTableDataDirty:Boolean = false;
			
			private var _origTableMapping:DimensionTableMapping;
			private var _isInitTableMappingSet:Boolean = false;
			private var _isTableMappingDirty:Boolean = false;
			
			[Bindable] private var _availSequences:ArrayCollection = null;
			private var _isInitAvailSequencesSet:Boolean = false;
			private var _isAvailSequencesDirty:Boolean = false;
			
			[Bindable] private var _initPolicy:DimensionInitPolicy = null;
			[Bindable] private var _maxRecordsTxt:String = "";
			[Bindable] private var _missPolicy:DimensionMissPolicy = null;
			private var _isMissPolicyDirty:Boolean = false;
			
			[Bindable] private var _showSequenceUi:Boolean = false;
			private var _origSurrogateSequence:Sequence = null;
			[Bindable] private var _surrogateSequenceName:String = null;
			[Bindable] private var _surrogateSequence:Sequence = null;
			
			[Bindable] private var _showDefaultValueColumn:Boolean = true;
			[Bindable] private var _defaultValueHeaderText:String = "Default Values";
			[Bindable] private var _mappingDisplayItems:ArrayCollection = new ArrayCollection();
			
			public function get tableCtxt():TableContext
			{
				return _tableCtxt;
			}
			public function set tableCtxt(value:TableContext):void
			{
				_tableCtxt = value;
				
				if(_tableCtxt == null || _tableCtxt.connConfig == null || _tableCtxt.connConfig.isValid() == false || _tableCtxt.table == null)
				{
					setStatusMsg(new StatusMessage(StatusType.ERROR, "Invalid Data Provided"), statusOnlyState);
				}
				else
				{
					setStatusMsg(new StatusMessage(StatusType.PROGRESS, "Loading Mapping Details ..."), progressState);
				}
			}
			
			public function displayUnrecoverableError(msg:String):void
			{
				this.setStatusMsg(new StatusMessage(StatusType.ERROR, msg), statusOnlyState);
			}
			
			public function displayNonBlockingStatusMsg(msg:StatusMessage):void
			{
				this.setStatusMsg(msg, null);
			}
			
			public function displaySaveMappingResult(msg:StatusMessage):void
			{
				this.setStatusMsg(msg, normalState);
			}
			
			public function set tableData(value:Table):void
			{
				this._tableData = value;
				this._isInitTableDataSet = true;
				this._isTableDataDirty = true;
				invalidateProperties();
			}
			
			public function set tableMappingData(tableMapping:DimensionTableMapping):void
			{
				this._origTableMapping = tableMapping;
				this._isInitTableMappingSet = true;
				
				var initPolicy:DimensionInitPolicy = null;
				var maxRecords:Number = NaN;
				var missPolicy:DimensionMissPolicy = null;
				_origSurrogateSequence = null;
				if(tableMapping != null)
				{
					initPolicy = tableMapping.defaultCacheInitPolicy;
					maxRecords = tableMapping.defaultCacheMaxRecords;
					missPolicy = tableMapping.missPolicy;
					
					_origSurrogateSequence = tableMapping.surrogateKeySequence;
				}
				
				_initPolicy = initPolicy;
				_maxRecordsTxt = ((isNaN(maxRecords) == false && maxRecords > -1) ? maxRecords.toString() : "");
				setMissPolicy(missPolicy);
				
				this._isTableMappingDirty = true;
				invalidateProperties();
			}
			
			public function set availSequences(value:ArrayList):void
			{
				if(value == null)
				{
					_availSequences = null;
				}
				else
				{
					var tmp:ArrayCollection = new ArrayCollection();
					tmp.addAll(value);
					var tmpSort:Sort = new Sort();
					tmpSort.fields = [new SortField("name")];
					tmp.sort = tmpSort;
					tmp.refresh();
					_availSequences = tmp;
				}
				
				this._isInitAvailSequencesSet = true;
				this._isAvailSequencesDirty = true;
				invalidateProperties();
			}
			
			public function quickAddSeqComplete(sequence:Sequence):void
			{
				updateSequencesUi(sequence);
			}
			
			private function onMissPolicyChange():void
			{
				setMissPolicy(missPolicyDropDown.selectedItem);
			}
			
			private function setMissPolicy(missPolicy:DimensionMissPolicy):void
			{
				_missPolicy = missPolicy;
				_isMissPolicyDirty = true;
				
				if(DimensionMissPolicy.INSERT == _missPolicy)
				{
					_showSequenceUi = true;
					_defaultValueHeaderText = "Values to Insert";
				}
				else if(DimensionMissPolicy.SUBSTITUTE == _missPolicy)
				{
					_showSequenceUi = false;
					_defaultValueHeaderText = "Default Record Values";
				}
				else
				{
					_showSequenceUi = false;
					_defaultValueHeaderText = "Default Values";
				}
				
				
				var showDefaultValueColumn:Boolean = false;
				
				if(_missPolicy != null)
				{
					var roles:ArrayList = DimensionFieldRole.values();
					if(roles != null)
					{
						for(var roleIndex:int=0; roleIndex < roles.length; roleIndex++)
						{
							if(_missPolicy.isDefaultValueAllowed(roles.getItemAt(roleIndex) as DimensionFieldRole))
							{
								showDefaultValueColumn = true;
								break;
							}
						}
					}
				}
				
				_showDefaultValueColumn = showDefaultValueColumn;
				
				invalidateProperties();
			}
			
			private function isRequiredDataDirty():Boolean
			{
				return (_isTableDataDirty || _isTableMappingDirty || _isAvailSequencesDirty);
			}
			
			private function isAllRequiredDataSet():Boolean
			{
				return (_isInitTableDataSet && _isInitTableMappingSet && _isInitAvailSequencesSet);
			}
			
			override protected function commitProperties():void
			{
				if(_isMissPolicyDirty)
				{
					/*
					* The Miss Policy affects the sequence and default value controls
					* This requires gui changes and that the table display items be rebuilt.  If this is the initial set,
					* it will already be handled below.  Otherwise, we need to handle the change.
					*/
					if(isAllRequiredDataSet() && _mappingDisplayItems != null)
					{
						var tmpTableMapping:DimensionTableMapping = buildCurrDimTableMapping(false);
						
						_mappingDisplayItems.disableAutoUpdate();
						var currMappingDisplayItem:ColumnMappingDisplayItem = null;
						for(var index:int=0; index < _mappingDisplayItems.length; index++)
						{
							currMappingDisplayItem = (_mappingDisplayItems.getItemAt(index) as ColumnMappingDisplayItem);
							if(currMappingDisplayItem != null)
							{
								currMappingDisplayItem.tableMapping = tmpTableMapping;
							}
						}
						_mappingDisplayItems.enableAutoUpdate();
						
						updateSequencesUi((_surrogateSequence != null ? _surrogateSequence : _origSurrogateSequence));
					}
					
					_isMissPolicyDirty = false;
				}
				
				if(isRequiredDataDirty() && isAllRequiredDataSet())
				{
					/* Only process the data if all of the initial requested data is
					 * avaiable or if data has changed after the inital load
					 */
					if(_tableData == null)
					{
						setStatusMsg(new StatusMessage(StatusType.ERROR, "Failed to Load Table Data"), statusOnlyState);
					}
					else if(_availSequences == null)
					{
						setStatusMsg(new StatusMessage(StatusType.ERROR, "Failed to Load the Sequences from the DB"), statusOnlyState);
					}
					else
					{
						if(_isTableMappingDirty)
						{
							// Need to completely refresh the mappings
							rebuildMappingDisplayItems(_origTableMapping);
							updateSequencesUi(_origSurrogateSequence);
						}
						else if(_isTableDataDirty)
						{
							// Overlay the new table info with any edits a user may have made to the mapping
							rebuildMappingDisplayItems(buildCurrDimTableMapping());
						}
						
						if(_isAvailSequencesDirty && !_isTableMappingDirty)
						{
							updateSequencesUi((_surrogateSequence != null ? _surrogateSequence : _origSurrogateSequence));
						}
						
						_isTableDataDirty = false;
						_isTableMappingDirty = false;
						_isAvailSequencesDirty = false;
						
						if(this.currentState != normalState.name)
						{
							setStatusMsg(null, normalState);
						}
					}
				}
				
				super.commitProperties();
			}
			
			private function onSurrogateSequenceDropDownChange(event:IndexChangeEvent):void
			{
				_surrogateSequence = (surrogateSequenceDropDown.selectedItem as Sequence);
			}
			
			private function onSurrogateSequenceTextInputChange(event:Event):void
			{
				_surrogateSequenceName = surrogateSequenceTextInput.text;
			}
			
			private function updateSequencesUi(sequence:Sequence):void
			{
				var matchingSequence:Sequence = findMatchingSequenceInstance(sequence);
				
				if(matchingSequence == null)
				{
					if(sequence != null && StringUtils.isNotBlank(sequence.name))
					{
						_surrogateSequenceName = sequence.name;
					}
					else
					{
						_surrogateSequenceName = "";
					}
					_surrogateSequence = null;
				}
				else
				{
					_surrogateSequenceName = "";
					_surrogateSequence = matchingSequence;
				}
			}
			
			private function findMatchingSequenceInstance(sequenceToFind:Sequence):Sequence
			{
				var matchingSequence:Sequence = null;
				
				if(_availSequences != null && sequenceToFind != null)
				{
					var currSequence:Sequence = null;
					for(var index:int=0; index < _availSequences.length; index++)
					{
						currSequence = (_availSequences.getItemAt(index) as Sequence);
						if(currSequence != null && currSequence.equals(sequenceToFind))
						{
							matchingSequence = currSequence;
							break;
						}
					}
				}
				
				return matchingSequence;
			}
			
			private function rebuildMappingDisplayItems(dimTableMapping:DimensionTableMapping):void
			{
				_mappingDisplayItems.disableAutoUpdate();
				_mappingDisplayItems.removeAll();
				
				if(_tableData != null)
				{
					_mappingDisplayItems.addAll(ColumnMappingDisplayItem.buildMappings((_tableData == null ? null : _tableData.columns), dimTableMapping));
				}
				
				_mappingDisplayItems.enableAutoUpdate();
			}
			
			private function onAddSequenceClick():void
			{
				if(StringUtils.isNotBlank(surrogateSequenceTextInput.text))
				{
					var createSequenceRequestEvent:SequenceStatusEvent = new SequenceStatusEvent(SequenceStatusEvent.CREATE_SEQUENCE, null, null);
					createSequenceRequestEvent.connConfig = tableCtxt.connConfig;
					var tmpSequence:Sequence = new Sequence();
					tmpSequence.schema = _tableCtxt.table.schema;
					tmpSequence.name = StringUtils.trim(surrogateSequenceTextInput.text);

					createSequenceRequestEvent.sequences = new ArrayList([tmpSequence]);
					this.dispatchEvent(createSequenceRequestEvent);
				}
			}
			
			private function onSaveClick():void
			{
				var dimTableCacheCfg:DimensionTableMapping = buildCurrDimTableMapping();
				
				setStatusMsg(new StatusMessage(StatusType.PROGRESS, "Saving Enrichment Mapping ..."), progressState);
				
				var saveRequestEvent:DimTableMappingEvent = new DimTableMappingEvent(DimTableMappingEvent.SAVE_REQUEST, null, null);
				saveRequestEvent.tableCtxt = _tableCtxt.clone();
				saveRequestEvent.dimTableMapping = dimTableCacheCfg;
				this.dispatchEvent(saveRequestEvent);
			}
			
			private function onResetClick():void
			{
				Alert.show("Are you sure you want to clear your changes?", "Confirm Reset", (Alert.YES | Alert.NO), this, onResetConfirmationClose, null, Alert.NO);
			}
			
			private function onResetConfirmationClose(event:CloseEvent):void
			{
				if(event != null && event.detail == Alert.YES)
				{
					var loadMappingRequestEvent:DimTableMappingEvent = new DimTableMappingEvent(DimTableMappingEvent.LOAD_REQUEST, null, null);
					loadMappingRequestEvent.tableCtxt = _tableCtxt.clone();
					this.dispatchEvent(loadMappingRequestEvent);
				}
			}
			
			private function buildCurrDimTableMapping(includeFieldMappings:Boolean=true):DimensionTableMapping
			{
				var result:DimensionTableMapping = new DimensionTableMapping();
				result.tableCtxt = this.tableCtxt;
				if(_origTableMapping != null)
				{
					result.mappingId = _origTableMapping.mappingId;
				}
				result.defaultCacheInitPolicy = (initPolicyDropDown.selectedItem as DimensionInitPolicy);
				result.defaultCacheMaxRecords = Number(maxRecordsTextInput.text);
				result.missPolicy = (missPolicyDropDown.selectedItem as DimensionMissPolicy);
				if(result.missPolicy == DimensionMissPolicy.INSERT)
				{
					result.surrogateKeySequence = surrogateSequenceDropDown.selectedItem;
				}
				
				if(includeFieldMappings && _mappingDisplayItems != null && _mappingDisplayItems.length > 0)
				{
					result.fieldMappings = new ArrayList();
					
					var currMappingDisplayItem:ColumnMappingDisplayItem = null;
					var currMapping:DimensionFieldMapping = null;
					for(var index:int=0; index < _mappingDisplayItems.length; index++)
					{
						currMappingDisplayItem = (_mappingDisplayItems.getItemAt(index) as ColumnMappingDisplayItem);
						
						if(currMappingDisplayItem != null && currMappingDisplayItem.role != null && currMappingDisplayItem.column != null)
						{
							var validatedFieldType:ICacheType = null;
							var availCacheTypes:ArrayList = JsonCacheTypes.supportedValues(currMappingDisplayItem.column.type);
							if(availCacheTypes != null && availCacheTypes.length > 0)
							{
								if(availCacheTypes.length == 1)
								{
									validatedFieldType = (availCacheTypes.getItemAt(0) as ICacheType);
								}
								else if(availCacheTypes.getItemIndex(currMappingDisplayItem.fieldType) < 0)
								{
									validatedFieldType = null;
								}
							}
							else
							{
								validatedFieldType = null;
							}
							
							currMapping = currMappingDisplayItem.buildFieldMapping();
							currMapping.fieldType = validatedFieldType;
							if(validatedFieldType != null && validatedFieldType.formatMaskRequired == false)
							{
								// Format Mask is not allowed ... could be from an old mapping.  Strip it out.
								currMapping.formatMask = null;
							}
							
							if(result.missPolicy != null &&
								result.missPolicy.isDefaultValueAllowed(currMapping.role) == false)
							{
								// Default Value is not allowed ... could be from an old mapping.  Strip it out.
								currMapping.defaultValue = null;
							}
							
							result.fieldMappings.addItem(currMapping);
						}
					}
				}
				return result;
			}
			
			private function setStatusMsg(statusMsg:StatusMessage, newState:State=null):void
			{
				_currStatusMsg = statusMsg;
				
				if(newState != null)
				{
					this.currentState = newState.name;
				}
			}
		]]>
	</fx:Script>
</s:Group>
