<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" class="HelpTopic" data-mc-search-type="Stem" data-mc-help-system-file-name="Default.xml" data-mc-path-to-help-system="../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-medium="non-print" data-mc-toc-path="Defining the Data Model">
    <!-- saved from url=(0016)http://localhost -->
    <head>
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>About dimension table enrichments</title>
        <link href="../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../resources/stylesheets/leidos.css" rel="stylesheet" />
        <script src="../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <h2 class="Heading2"><a name="kanchor128"></a><a name="kanchor129"></a>About dimension table enrichments</h2>
        <p>Data enrichment is one of the most powerful features of <span class="VariablesProductName">DigitalEdge</span>. Records in data sources are often coded, linked to other relational tables that provide contextual data. For example, with sales transactions, records may include data elements such as CUSTOMER_ID, DEPT_CODE, and PRODUCT_ID; dimensional data tables provide the descriptive information keyed to those fields, such as CUSTOMER_NAME, DEPT_TITLE, and PRODUCT_NAME. By specifying dimensional tables and associating them with data sources, you instruct <span class="VariablesProductName">DigitalEdge</span> to pre-join the dimension tables with incoming data sources, enriching the data source records with relevant information in one fully processed input model record. </p>
        <p>Configuring data tables that provide enhancement data and defining dimensional enrichments can be complex, depending on the number of enrichments you want to configure. But once data specifications are complete and accurate, dimension table enrichments can save  time by:</p>
        <ul>
            <li value="1">reducing the time it takes to receive search results from a complex query</li>
            <li value="2">consolidating related information in one complete record for presentation to an analyst</li>
            <li value="3">eliminating ambiguity with contextual data in pre-joined records</li>
        </ul>
        <p>Dimensional enrichments require the specification of dimension tables, which store the enhancement data that you want to add to coded data in the <span class="VariablesProductName">DigitalEdge</span>input model. You can define a dimension table at any time, but it is most logical to define the tables with the <b>Table Manager</b> tool before you specify enrichments in the <b>Data Model Editor</b>. In other words, when possible, you should define your source data – including dimension tables - before you configure data use in <span class="VariablesProductName">DigitalEdge</span>.  Data tables that are defined in the <b>Table Manager</b> determine what data will go into the dimension table enrichments that you specify in the <b>Data Model Editor</b>.</p>
        <p><a name="kanchor130"></a><a name="kanchor131"></a>There are three types of keys in dimension tables:</p>
        <p><a name="kanchor132"></a><b>Primary key</b>: Every table has a master key which aids in read/write performance and with data integrity. This is the <i>primary key</i>. The primary key defines one or more columns which uniquely identify a row within a table. The primary key can be either a natural or a surrogate key. However, best practices dictate that the primary key would be a surrogate key. 
   
        </p>
        <p>Most database systems only allow a single key in a table, the primary key. However, you can have uniqueness indexes which identify secondary keys, which can either be natural or surrogate keys.</p>
        <p><a name="kanchor133"></a><b>Natural key</b>: A natural key defines one or more columns that uniquely identify each row in the table.The columns used in a natural key must be part of the original data set. For example, a unique customer key may be built with the C_NAME and the C_SSN columns. Or a table of airport codes may only need one field - the3-letter airport code - as a natural key that is unique for each record. Natural keys are most often defined with two or more columns. This key is used to index the records in the dimension table and to search the table for a matching row.</p>
        <p><a name="kanchor134"></a><b>Surrogate key</b>: A surrogate key is a single column added to the original data set, to uniquely identify each record. Any column type (string, number, alpha-numeric) can be used as a surrogate key as long as it is unique. However, a sequential numeric column is usually used for performance and simplicity. You need a surrogate key to insert a record into <span class="VariablesProductName">DigitalEdge</span>. You do not need a surrogate key if you set the enrichment cache to ignore an unknown record (and not add it to the database).  (<a href="step_3_define_dimension_tables.htm#ConfigureEnrichmentCache" class="MCXref xref">See "Configure the enrichment cache"</a>)</p>
        <h3 class="Heading3"><a name="kanchor135"></a>About the enrichment cache</h3>
        <p>When <span class="VariablesProductName">DigitalEdge</span> ingests data source records, the enrichment processor checks input records for matches against the dimension records.  It would be too slow to do full look-ups to match every transactional record against the dimension records, so <span class="VariablesProductName">DigitalEdge</span> uses an enrichment cache for faster processing. The enrichment cache can hold dimension records in memory, but if no match is made between an incoming record and the cache, the enrichment engine does a full look-up on the dimension data, using the indexes that you specify for a particular table. Performance could decrease if look-ups occur too frequently. But the cache “learns” as processing continues, keeping the most recently used dimension records in memory and dropping the least frequently matched records out of the cache.</p>
        <p>When you configure the enrichment cache, there are several specs that must be defined. First, you must define the size of the cache by specifying how many dimensional records should be held in memory for matching against input records. This number will depend on the size of each dimension table. You should also consider what resources are available on the ingest node for dedication to the enrichment cache. Obviously, there is a trade-off between resources and performance that you should experiment with in test mode.</p>
        <p>You must also select a load strategy for the enrichment cache, to specify how the cache is initialized. This is another trade-off that must be weighed: speed of cache startup versus potential cache misses if the cache has not yet reached its maximum size. Load strategy options include:</p>
        <ul>
            <li value="1"><a name="kanchor136"></a><b>Eager</b>: Completely filling the cache as soon as the system starts up the ingest node (for smaller dimension tables )</li>
            <li value="2"><a name="kanchor137"></a><b>Lazy</b>: Creating the cache only as data comes in – this is a good strategy to use if the dimension records are used infrequently (for example, customer names for a big-box store, where customers make purchases infrequently)</li>
            <li value="3"><a name="kanchor138"></a><b>Background</b>: Creating the cache when the system starts up the ingest node, by loading dimension records into the cache in the background or on-demand when a record needs to be processed</li>
        </ul>
        <p><a name="kanchor139"></a>When the enrichment engine attempts to match input model records with dimension tables, the system could occasionally locate an unknown record. For example, a new customer may not be in the CUSTOMER database yet, so when a transaction comes in with a newly created CUSTOMER_ID that does not match a key in the CUSTOMER dimension table, the system will fail to match the record to the CUSTOMER dimension table. When this occurs, <span class="VariablesProductName">DigitalEdge</span> needs instructions for handling the unknown record. These instructions are specified as an <b>Unknown Record Action</b> on the <b>Enrichment </b>tab:</p>
        <ul>
            <li value="1"><a name="kanchor140"></a><b>Ignore Record</b>: Stop processing the record entirely. The record will not be added to the <span class="VariablesProductName">DigitalEdge</span> database. <span class="VariablesProductName">DigitalEdge</span> will take no further action  on the record. </li>
            <li value="2"><a name="kanchor141"></a><b>Add Record to DB</b>: Insert the incoming record into the <span class="VariablesProductName">DigitalEdge</span> database under a new surrogate key. The natural key and data values identified in the enrichment configuration will be stored in the table. Using the sales transaction example, a new transaction record is added to the <span class="VariablesProductName">DigitalEdge</span> database with a CUSTOMER_ID that does not match a record in the CUSTOMER dimension table.</li>
            <li value="3"><a name="kanchor142"></a><b>Use Default Record</b>: Look up a default row in the dimension table and use it to enrich the record. Using the sales example, if a new customer has not yet been added to a dimension table, the  CUSTOMER_ID column in the sales transaction record may not find a match in the CUSTOMER dimension table. In that case, you could instruct <span class="VariablesProductName">DigitalEdge</span> to add a value such as “unknown”or "UNK" to the enrichment field of the transaction record and continue processing other records.</li>
        </ul>
        <p class="Indent">
            <img src="../resources/images/configuration/enrichmentmatching.png" class="large_graphic" />
        </p>
        <p><a name="kanchor143"></a>How frequently <span class="VariablesProductName">DigitalEdge</span> encounters an unknown record may depend on the integrity of your data sources. Data errors may occur frequently in a less than robust data source. By adding an “unknown” value to these records, you may be able to identify quality control issues that should be addressed in the application where the data source originated.</p>
        <p>When you have the columns, indexes, and keys specified for a dimension table,  you must map the dimension fields to the input model fields that will be enriched with data from this table. The <b>Enrichment </b>tab correlates dimensional data with <span class="VariablesProductName">DigitalEdge</span>data records.</p>
        <h3 class="Heading3">About importing a dimension table</h3>
        <p><a name="kanchor144"></a>When you finish defining a dimension table, you can import your source enrichment data into the newly created dimension table at any time. A good practice is to import a few test records first, then work in the <b>Data Model Editor</b> to define a limited number of enrichments for prototyping. You can clear the dimension table and re-import records at any time.</p>
        <p data-mc-conditions="Default.ScreenOnly">&#160;
        </p>
        <p class="HeadingLevel3NonTOC" data-mc-conditions="Default.ScreenOnly">Next step:</p>
        <p data-mc-conditions="Default.ScreenOnly"><a href="step_3_define_dimension_tables.htm" class="ParaTextOnly MCXref xref xrefParaTextOnly">Step 3: Define Dimension Tables</a>
        </p>
        <p class="Front">&#160;</p>
        <p class="Front">&#160;</p>
        <p class="FooterNonPrint">For  Technical Support, contact: <span class="VariablesEmail">DigitalEdgeSupport@Leidos.com</span></p>
        <p class="FooterNonPrint">To submit ideas or feedback, go to https://www9.v1ideas.com/digitaledge/welcome</p>
        <p class="FooterNonPrint">© <span class="VariablesCompanyName">Leidos</span>. All rights reserved</p>
    </body>
</html>