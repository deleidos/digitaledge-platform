<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx">
	
	<s:layout>
		<s:VerticalLayout paddingTop="5" paddingRight="5" paddingBottom="5" paddingLeft="5"/>
	</s:layout>
	
	<s:Label minHeight="20" width="80%" textAlign="left" verticalAlign="middle" lineBreak="toFit" maxDisplayedLines="2" text="{_title}" toolTip="{_title}" />
	<s:Scroller width="100%" height="100%" horizontalScrollPolicy="auto" verticalScrollPolicy="auto">
		<s:VGroup id="container" width="100%" paddingTop="2" paddingRight="2" paddingBottom="2" paddingLeft="2" clipAndEnableScrolling="true" />
	</s:Scroller>

	<fx:Script>
		<![CDATA[
			import com.deleidos.rtws.commons.util.StringUtils;
			
			import flash.text.engine.FontWeight;
			
			import flashx.textLayout.elements.DivElement;
			import flashx.textLayout.elements.FlowElement;
			import flashx.textLayout.elements.FlowGroupElement;
			import flashx.textLayout.elements.FlowLeafElement;
			import flashx.textLayout.elements.LinkElement;
			import flashx.textLayout.elements.ParagraphElement;
			import flashx.textLayout.elements.SpanElement;
			import flashx.textLayout.elements.SubParagraphGroupElement;
			import flashx.textLayout.elements.TextFlow;
			import flashx.textLayout.formats.LineBreak;
			import flashx.textLayout.formats.TextAlign;
			import flashx.textLayout.formats.WhiteSpaceCollapse;
			
			import mx.charts.renderers.DiamondItemRenderer;
			import mx.collections.ArrayList;
			import mx.utils.StringUtil;
			
			import spark.components.Label;
			import spark.components.RichEditableText;
			
			private static const MAX_ALERTS_DISPLAYED:int = 10;
			private static const INDENT_LEVEL_PIXELS:int = 10;
			private static const FIELD_VALUE_SPACE_SEPARATION_COUNT:int = 2;
			
			[Bindable] private var _title:String = "";
			
			//generates the info window
			// @param list - a list of json objects whose data needs to be displayed in the info window
			public function generate(list:ArrayList):void
			{
				//Clears all the information from the previous info window
				container.removeAllElements();
				
				if(list != null && list.length > 0) {
					var multipleAlerts:Boolean = (list.length > 1);
					
					if(multipleAlerts) {
						_title = list.length + " Alerts";
						if(list.length > MAX_ALERTS_DISPLAYED) {
							_title = _title + " (" + MAX_ALERTS_DISPLAYED + " Shown)";
						}
					}
					else {
						_title = getTitleForAlert(list.getItemAt(0));
					}
					
					for(var i:Number = 0; i < list.length && i < MAX_ALERTS_DISPLAYED; i++)
					{
						var obj:Object = list.getItemAt(i);
						
						var group:VGroup = new VGroup();
						group.percentWidth = 100;
						
						addContent(group, obj, multipleAlerts);
						container.addElement(group);
					}
				}
			}
			
			private function addContent(container:Group, obj:Object, includeHeader:Boolean):void {
				
				var tmpText:RichEditableText = null;
				
				if(includeHeader) {
					var itemHeader:spark.components.Label = new Label();
					itemHeader.styleName = "formHeading";
					itemHeader.percentWidth = 100;
					itemHeader.setStyle("lineBreak", LineBreak.TO_FIT);
					itemHeader.setStyle("textAlign", TextAlign.LEFT);
					itemHeader.maxDisplayedLines = 1;
					itemHeader.text = getTitleForAlert(obj);
					container.addElement(itemHeader);
				}
				
				if(obj.hasOwnProperty("contentName") && obj.hasOwnProperty("contentValue")) {
					
					var contentNames:Array = (obj["contentName"] as Array);
					var contentValues:Array = (obj["contentValue"] as Array);
					
					if(contentNames != null && contentValues != null) {
						var contentCount:int = Math.min(contentNames.length, contentValues.length);
						
						var currContentName:String = null;
						var currContentValue:String = null;
						var currTextFlow:TextFlow = null;
						var currSpan:SpanElement = null;
						var currLink:LinkElement = null;
						var currP:ParagraphElement = null;
						
						for(var contentIndex:int=0; contentIndex < contentCount; contentIndex++) {
							currContentName = (contentNames[contentIndex] as String);
							currContentValue = (contentValues[contentIndex] as String);
							
							if(StringUtils.isNotBlank(currContentValue)) {
								
								currSpan = new SpanElement();
								if(StringUtils.isNotBlank(currContentName)) {
									currSpan.text = currContentName;
								}
								else {
									currSpan.text = currContentValue;
								}
								
								currLink = new LinkElement();
								currLink.href = currContentValue;
								currLink.addChild(currSpan);
								
								currP = new ParagraphElement();
								currP.addChild(currLink);
								
								currTextFlow = new TextFlow();
								currTextFlow.addChild(currP);
								
								tmpText = buildStdTextContainer();
								tmpText.textFlow = currTextFlow;
								container.addElement(tmpText);
							}
						}
					}
				}
				
				if(obj.hasOwnProperty("extrinsic")) {
					var extrinsicTextFlow:TextFlow = buildTextFlow(obj["extrinsic"]);
					if(extrinsicTextFlow != null) {
						tmpText = buildStdTextContainer();
						tmpText.textFlow = extrinsicTextFlow;
						container.addElement(tmpText);
					}
				}
			}
			
			private function getTitleForAlert(alert:Object):String {
				var result:String = "";
				
				if(alert.hasOwnProperty("alertName")) {
					result = alert["alertName"];
				}
				
				if(StringUtils.isBlank(result)) {
					result = "Alert";
				}
				
				return result;
			}
			
			private function buildStdTextContainer():RichEditableText {
				var result:RichEditableText = new RichEditableText();
				result.editable = false;
				result.percentWidth = 100;
				result.lineBreak = LineBreak.TO_FIT;
				return result;
			}
			
			private function buildTextFlow(obj:Object):TextFlow {
				var result:TextFlow = new TextFlow();
				
				if(obj != null){
					var flowElement:FlowElement = buildFlowElement(obj, true);
					if(flowElement != null) {
						result.addChild(flowElement);
					}
				}
				
				return result;
			}
			
			private function buildFlowElement(obj:Object, isRoot:Boolean=false):FlowElement {
				var result:FlowElement = null;
				
				if(obj == null) {
					return null;
				}
				else if(obj is Array) {
					result = null;
					var currInsertionPoint:FlowGroupElement = null;
					
					var currFlowElement:FlowElement = null;
					for(var index:int=0; index < (obj as Array).length; index++) {
						
						currFlowElement = buildFlowElement((obj as Array)[index]);
						
						if(currFlowElement != null) {
							if(result == null) {
								result = new DivElement();
								
								if(isRoot == false) {
									DivElement(result).paddingLeft = INDENT_LEVEL_PIXELS;
								}
								
								currInsertionPoint = DivElement(result);
							}
							
							/* Add each flow element to the wrapper div.  Leaf-level flowelements are placed
							 * in paragraph elements and siblings are placed in the same p element.
							 */
							if(currFlowElement is FlowLeafElement || currFlowElement is SubParagraphGroupElement) {
								if(currInsertionPoint is DivElement) {
									// Can't add these types to a div in the awesomeness that is text flow.  Make a paragraph instead
									var tmpP:ParagraphElement = new ParagraphElement();
									DivElement(result).addChild(tmpP);
									currInsertionPoint = tmpP;
								}
							}
							else {
								if(currInsertionPoint is ParagraphElement) {
									// Step back up to the root div of this array to place this block level item in there
									currInsertionPoint = DivElement(result);
								}
							}
							
							currInsertionPoint.addChild(currFlowElement);
						}
					}
					
					return result;
				}
				else if(obj is String || obj is Number) {
					result = new SpanElement();
					
					// NiceToHave Eventually need to get formatting from a cfg file
					SpanElement(result).text = (obj.toString());
					
					return result;
				}
				else if(obj is Object) {
					result = new DivElement();
					if(isRoot == false) {
						DivElement(result).paddingLeft = INDENT_LEVEL_PIXELS;
					}
					
					var currDiv:DivElement = null;
					var currP:ParagraphElement = null;
					var currLabelSpan:SpanElement = null;
					
					for (var field:String in obj) {
						if(StringUtils.isBlank(field)) {
							continue;
						}
						
						currDiv = new DivElement();
						currP = new ParagraphElement();
						currDiv.addChild(currP);
						
						currLabelSpan = new SpanElement();
						currLabelSpan.fontWeight = FontWeight.BOLD;
						currLabelSpan.text = field + ":";
						currP.addChild(currLabelSpan);
						
						var currFieldFlowElement:FlowElement = buildFlowElement(obj[field]);
						if(currFieldFlowElement != null) {
							if(currFieldFlowElement is FlowLeafElement || currFieldFlowElement is SubParagraphGroupElement) {
								var spacingSpan:SpanElement = new SpanElement();
								spacingSpan.whiteSpaceCollapse = WhiteSpaceCollapse.PRESERVE;
								spacingSpan.text = StringUtil.repeat(" ", FIELD_VALUE_SPACE_SEPARATION_COUNT);
								currP.addChild(spacingSpan);
								currP.addChild(currFieldFlowElement);
							}
							else {
								currDiv.addChild(currFieldFlowElement);
							}
						}
						
						DivElement(result).addChild(currDiv);
					}
					
					return result;
				}
				else {
					return null;
				}
			}
		]]>
	</fx:Script>
</s:Group>
