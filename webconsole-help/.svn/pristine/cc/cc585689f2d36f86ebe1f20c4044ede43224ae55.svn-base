<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" class="HelpTopic" data-mc-search-type="Stem" data-mc-help-system-file-name="Default.xml" data-mc-path-to-help-system="../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-medium="non-print" data-mc-toc-path="Defining the Data Model|Step 2 Define Data Sources, Parsers, and Data Source Mappings|Parser parameters">
    <!-- saved from url=(0016)http://localhost -->
    <head>
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Binary parser</title>
        <link href="../resources/tablestyles/basic.css" rel="stylesheet" />
        <link href="../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../resources/stylesheets/leidos.css" rel="stylesheet" />
        <script src="../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <h3 class="Heading3"><a name="kanchor115"></a>Binary parser</h3>
        <p>This configurable  parser works with  binary files to extract fixed fields. The parser reads any Base 64 encoded binary file, interprets the file as one string of bytes, and extracts portions of that string as fixed fields that should be saved and input for <span class="VariablesProductName">DigitalEdge</span>. You define the field definitions and extraction algorithms to specify the fields that are ingested into your data model. This parser can be used with any Base 64 encoded binary file that includes fixed fields, such as a data feed or messages coming in over a wire. Use this parser when none of the other format-specific parsers meet the needs of the incoming data. While it may take some time to configure the parser, you can customize it exactly to your site-specific needs. </p>
        <p class="Note">When selecting a transport to use with the binary parser, the transport's <code>record-format</code> parameter must be set to PCAP to work with the binary parser, since the PCAP record format type outputs Base 64 encoded data.</p>
        <table style="mc-table-style: url('../resources/tablestyles/basic.css');margin-left: 0;margin-right: auto;" class="TableStyle-Basic" cellspacing="0">
            <col class="TableStyle-Basic-Column-Column1" style="width: 1.59in;" />
            <col class="TableStyle-Basic-Column-Column1" style="width: 4.5in;" />
            <thead>
                <tr class="TableStyle-Basic-Head-Header1">
                    <th class="TableStyle-Basic-HeadD-Column1-Header1" colspan="2">Binary Parser</th>
                </tr>
                <tr class="TableStyle-Basic-Head-Header1">
                    <th class="TableStyle-Basic-HeadE-Column1-Header1"> Parameter Name</th>
                    <th class="TableStyle-Basic-HeadD-Column1-Header1">Explanation</th>
                </tr>
            </thead>
            <tbody>
                <tr class="TableStyle-Basic-Body-Body1">
                    <td class="TableStyle-Basic-BodyE-Column1-Body1" style="font-weight: normal;">custom-config</td>
                    <td class="TableStyle-Basic-BodyD-Column1-Body1" style="font-weight: normal;">
                        <p>Double-click the <b>Current Value</b> entry to create a custom configuration that <span class="VariablesProductName">DigitalEdge</span> should use to parse the incoming data. User instructions will appear in the dialog box; delete the instructions or cut and paste portions of the instructions to help create your custom specifications. </p>
                        <p>For each incoming field in a binary file that you want to ingest and save in <span class="VariablesProductName">DigitalEdge</span>, you must include one line to define the field. Use one of the following types of field definitions to define each field. Note that <code>fieldName </code>references one of the fields that you specified on the previous screen, in the <b>Add Data Source</b> dialog box in Data Model Editor (<b>Get input fields from...</b>).</p>
                        <ul>
                            <li value="1"><code>READTOEND:fieldName:startPos:fieldType</code> - To locate this <code>fieldName</code>, read data starting with the byte in <code>startPos</code> and reading data to the end of the data string. Specify a <code>fieldType </code>of <code>ASCII</code>, <code>NUMBER</code>, or <code>BYTES</code>. For example, in a data string that is 20 bytes long, to extract a field called <code>Title </code>in the last 10 bytes of a string as ASCII&#160;data, specify:</li>
                        </ul>
                        <p class="IndentBig"><code>READTOEND:Title:10:ASCII</code>
                        </p>
                        <ul>
                            <li value="1"><code>FIXED:fieldName:startPos:length:fieldType: reverse</code> - Use this definition when all incoming fields are the same length. Locate this <code>fieldName</code> by reading data starting with the byte in <code>startPos</code> and reading a fixed number of bytes specified in the <code>length </code>parameter. If you want to read data starting from the end of the data string, use the reverse parameter (valid values = <code>true</code>, <code>reverse</code>, <code>r</code>, or <code>t</code>); otherwise, leave the <code>reverse </code>parameter out of the definition. Specify a <code>fieldType </code>of <code>ASCII</code>, <code>NUMBER</code>, or <code>BYTES</code>. For example, to locate a field named <code>taxrate</code> in the middle of a 16 byte string, you may specify:</li>
                        </ul>
                        <p class="IndentBig"><code>FIXED:taxrate:8:2:NUMBER</code>
                        </p>
                        <ul>
                            <li value="1"><code>BACKREFERENCE:fieldName:startPos:otherField: fieldType:reverse</code> -  Use a <code>BACKREFERENCE&#160;</code>definition to use a previously defined field in the definition for another field. The BACKREFERENCE line must always appear after the definition of the <code>otherField </code>that is used in the definition. If you want to read data starting from the end of the data string, use the reverse parameter (valid values = <code>true</code>, <code>reverse</code>, <code>r</code>, or <code>t</code>); otherwise, leave the <code>reverse </code>parameter out of the definition. For example, if you extracted <code>location </code>data in a <code>READTOEND </code>definition that included a three-character airport code and a state abbreviation starting in position 20, and you then want to isolate the <code>state </code>data in that string, you would specify:</li>
                        </ul>
                        <p class="IndentBig"><code>READTOEND:location:20:ASCII</code>
                        </p>
                        <p class="IndentBig"><code>BACKREFERENCE:state:3:location:ASCII</code>
                        </p>
                        <ul>
                            <li value="1"><code>REGEX:fieldName:regex:targetField:fieldType</code> - Use this definition to write a regular expression as a <code>fieldName</code> specification. The last capturing group of the <code>regex </code>will be returned as the value for this field. The <code>targetField</code> is used to reference the <code>fieldName </code>defined in a preceding field definition line. A <code>REGEX </code>line must always follow the line that defines the field needed for this definition. For example, to extract the second number from a string of delimited fields such as:</li>
                        </ul>
                        <p class="IndentBig">ABC123;456;789DEF</p>
                        <p class="IndentBig">specify:</p>
                        <p class="IndentBig"><code>READTOEND:data:0:ASCII</code>
                        </p>
                        <p class="IndentBig"><code>REGEX:second:\w+?\d+\D(\d+)\D:data:NUMBER</code>
                        </p>
                        <p><code>FieldType</code> valid values include <code>ASCII</code>, <code>NUMBER</code>, or <code>BYTES</code>.</p>
                        <p>Here's a simple example that illustrates the use of all four definition types:</p>
                        <p class="Indent">Incoming data string representing positions 0-9: ARDELP07WI</p>
                        <table style="mc-table-style: url('../resources/tablestyles/basic.css');margin-left: 0;margin-right: auto;" class="TableStyle-Basic" cellspacing="0">
                            <col class="TableStyle-Basic-Column-Column1" style="width: 3.25in;" />
                            <col class="TableStyle-Basic-Column-Column1" style="width: 1.25in;" />
                            <thead>
                                <tr class="TableStyle-Basic-Head-Header1">
                                    <th class="TableStyle-Basic-HeadE-Column1-Header1">Field Definitions</th>
                                    <th class="TableStyle-Basic-HeadD-Column1-Header1">Results</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr class="TableStyle-Basic-Body-Body1">
                                    <td class="TableStyle-Basic-BodyE-Column1-Body1"><code>READTOEND:rawdata:0:ASCII</code>
                                    </td>
                                    <td class="TableStyle-Basic-BodyD-Column1-Body1">ARDELP07WI</td>
                                </tr>
                                <tr class="TableStyle-Basic-Body-Body1">
                                    <td class="TableStyle-Basic-BodyE-Column1-Body1"><code>READTOEND:type:8:ASCII</code>
                                    </td>
                                    <td class="TableStyle-Basic-BodyD-Column1-Body1">WI</td>
                                </tr>
                                <tr class="TableStyle-Basic-Body-Body1">
                                    <td class="TableStyle-Basic-BodyE-Column1-Body1"><code>FIXED:transaction:3:4:ASCII</code>
                                    </td>
                                    <td class="TableStyle-Basic-BodyD-Column1-Body1">DELP</td>
                                </tr>
                                <tr class="TableStyle-Basic-Body-Body1">
                                    <td class="TableStyle-Basic-BodyE-Column1-Body1"><code>FIXED:montha:6:2:NUMBER</code>
                                    </td>
                                    <td class="TableStyle-Basic-BodyD-Column1-Body1">07</td>
                                </tr>
                                <tr class="TableStyle-Basic-Body-Body1">
                                    <td class="TableStyle-Basic-BodyE-Column1-Body1"><code>REGEX:monthb:\w+(\d+)\D:rawdata:ASCII</code>
                                    </td>
                                    <td class="TableStyle-Basic-BodyD-Column1-Body1">07</td>
                                </tr>
                                <tr class="TableStyle-Basic-Body-Body1">
                                    <td class="TableStyle-Basic-BodyE-Column1-Body1"><code>FIXED:branch:0:2:ASCII</code>
                                    </td>
                                    <td class="TableStyle-Basic-BodyD-Column1-Body1">AR</td>
                                </tr>
                                <tr class="TableStyle-Basic-Body-Body1">
                                    <td class="TableStyle-Basic-BodyB-Column1-Body1"><code>BACKREFERENCE:loc:0:branch:ASCII</code>
                                    </td>
                                    <td class="TableStyle-Basic-BodyA-Column1-Body1">A</td>
                                </tr>
                            </tbody>
                        </table>
                    </td>
                </tr>
                <tr class="TableStyle-Basic-Body-Body1">
                    <td class="TableStyle-Basic-BodyE-Column1-Body1" style="font-weight: normal;">default-access-label</td>
                    <td class="TableStyle-Basic-BodyD-Column1-Body1" style="font-weight: normal;">
                        <p>Distinguishes classified and unclassified data coming in; useful for arbitrating user access; valid values = UNCLASSIFIED, or any other classification marker</p>
                        <p>Default = UNCLASSIFIED</p>
                    </td>
                </tr>
                <tr class="TableStyle-Basic-Body-Body1">
                    <td class="TableStyle-Basic-BodyB-Column1-Body1" style="font-weight: normal;">default-source</td>
                    <td class="TableStyle-Basic-BodyA-Column1-Body1" style="font-weight: normal;">
                        <p>Specifies the source of the incoming data (e.g., IP address, URL, path)</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <p class="Front">&#160;</p>
        <p class="Front">&#160;</p>
        <p class="FooterNonPrint">For  Technical Support, contact: <span class="VariablesEmail">DigitalEdgeSupport@Leidos.com</span></p>
        <p class="FooterNonPrint">To submit ideas or feedback, go to https://www9.v1ideas.com/digitaledge/welcome</p>
        <p class="FooterNonPrint">© <span class="VariablesCompanyName">Leidos</span>. All rights reserved</p>
    </body>
</html>