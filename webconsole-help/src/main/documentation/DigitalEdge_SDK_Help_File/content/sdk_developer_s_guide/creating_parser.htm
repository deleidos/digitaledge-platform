<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" class="HelpTopic" data-mc-search-type="Stem" data-mc-help-system-file-name="Default.xml" data-mc-path-to-help-system="../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-medium="non-print" data-mc-toc-path="Sample Code">
    <!-- saved from url=(0016)http://localhost -->
    <head>
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Creating a parser</title>
        <link href="../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../resources/stylesheets/leidos_sdk.css" rel="stylesheet" />
        <script src="../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <h2 class="Heading2"><a name="kanchor8"></a>Creating a parser</h2>
        <p>Parsers extract and translate data sources into key-value pairs that are mapped to your input model. <span class="VariablesProductName">DigitalEdge</span> comes with many built in user-configurable parsers that work with data formats like CSV, CEF, email, EXIF, and JSON.  If you have a data source format that is not covered by the <span class="VariablesProductName">DigitalEdge</span> parsers, you can use the SDK to write your own specific parser that can be plugged into the <span class="VariablesProductName">DigitalEdge</span> framework and made available through the <span class="VariablesProductName">DigitalEdge</span>setup tools.</p>
        <p>To create a parser, you must write a class that implements the <code>com.deleidos.rtws.core.framework.parser.Parser</code> interface, described below.</p>
        <p class="HeadingLevel3NonTOC">Parser</p>
        <p><code>clone()</code>: Create and return a copy of your parser.</p>
        <p><code>parse()</code>: Parse the incoming data source into a JSONObject.  This method should contain the custom parsing logic required by your data source format.</p>
        <p><code>parseHeaders()</code>: Called before <code>parse()</code> by the <span class="VariablesProductName">DigitalEdge</span> framework.  Parse any headers in the incoming data source (headers are optional).</p>
        <p><code>setInputStream(java.io.InputStream)</code>: Called before <code>parse()</code> by the <span class="VariablesProductName">DigitalEdge</span> framework.  The InputStream associated with the incoming DataSource is passed as an argument.</p>
        <p><code>setStreamProperties(java.util.Properties)</code>: Called before<code> parse()</code> by the <span class="VariablesProductName">DigitalEdge</span> framework.  Save any properties associated with the InputStream. </p>
        <p class="HeadingLevel3NonTOC">Abstract classes</p>
        <p>Several Abstract classes that partially implement the <code>Parser </code>interface are provided by the SDK and recommended for use when writing your own parser class.  They are:</p>
        <p><code>AbstractBufferingParser</code>:  Abstract base class for parsers that may want to return more than one output record from a single parsed input record. Extending classes must override one of the two parse methods.</p>
        <p><code>AbstractLineParser</code>: Abstract base class for parsers that need to interpret data as lines of text. This class assumes that the input is new line terminated text. Methods are provided to extract input from a stream one line at a time as well as to split delimited data into fields.</p>
        <p><code>AbstractXMLParser</code>:  Abstract base class for parsers that need to interpret data as XML.</p>
        <p>(See the<i> Ingest SDK Javadocs</i> for more detailed information on these classes.)</p>
        <p class="Front">&#160;</p>
        <p class="Front">&#160;</p>
        <p class="FooterNonPrint">For  Technical Support, contact: <span class="VariablesEmail">DigitalEdgeSupport@Leidos.com</span></p>
        <p class="FooterNonPrint">To submit ideas or feedback, go to https://www9.v1ideas.com/digitaledge/welcome</p>
        <p class="FooterNonPrint">Â© <span class="VariablesCompanyName">Leidos</span>. All rights reserved</p>
    </body>
</html>