<?xml version="1.0" encoding="utf-8"?>
<s:Group
		 xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:rtws="com.deleidos.rtws.commons.view.component.*">
	
	<s:layout>
		<s:VerticalLayout />
	</s:layout>
	
	<s:HGroup width="100%" clipAndEnableScrolling="true">
		<rtws:StyleableIconButton id="watchButton" styleName="smallIcon watch" label="Subscribe" toolTip="Subscribe to the selected Alerting Rule(s)"
				enabled="{alertCriteriaDataGrid.selectedItems != null &amp;&amp; alertCriteriaDataGrid.selectedItems.length > 0}" />
		<s:Spacer width="10" />
		<rtws:StyleableIconButton id="createButton" styleName="smallIcon create" label="Add" toolTip="Create Alerting Rule"  />
		<rtws:StyleableIconButton id="editButton" styleName="smallIcon edit" toolTip="Edit the selected Alerting Rule"
			enabled="{alertCriteriaDataGrid.selectedItems != null &amp;&amp; alertCriteriaDataGrid.selectedItems.length == 1}" />
		<rtws:StyleableIconButton id="removeButton" styleName="smallIcon remove" toolTip="Remove the selected Alerting Rule(s)"
			enabled="{alertCriteriaDataGrid.selectedItems != null &amp;&amp; alertCriteriaDataGrid.selectedItems.length > 0}" />
		<s:Spacer width="100%" />
		<rtws:StyleableIconButton id="refreshButton" styleName="smallIcon refresh" toolTip="Refresh Alert Rules List"  />
	</s:HGroup>
	
	<s:DataGrid
		id="alertCriteriaDataGrid"
		width="100%" height="100%"
		dataProvider="{_alertDefs}"
		doubleClickEnabled="true"
		selectionMode="multipleRows">
		<s:columns>
			<s:ArrayList>
				<s:GridColumn headerText="Alert Name" dataField="alertDefName" />
				<s:GridColumn headerText="Data Model" dataField="alertDefModel" />				
			</s:ArrayList>
		</s:columns>
	</s:DataGrid>
	
	<fx:Script>
		<![CDATA[
			import com.deleidos.rtws.alertviz.models.AlertCriteriaEntry;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.collections.IList;
			
			import spark.collections.Sort;
			import spark.collections.SortField;

			
			[Bindable] private var _alertDefs:ArrayCollection = new ArrayCollection();
			
			private var _alertDefsSort:Sort;
			
			private function onInit():void {
				_alertDefs = new ArrayCollection();
				
				_alertDefsSort = new Sort();
				_alertDefsSort.fields = [new SortField("alertDefName")];
				
				_alertDefs.sort = _alertDefsSort;
				_alertDefs.refresh();
			}
			
			public function set alertDefs(value:IList):void {
				_alertDefs.removeAll();
				
				var tmpList:ArrayList = new ArrayList();
				if(value != null && value.length > 0) {
					var currObj:Object = null;
					for(var index:int=0; index < value.length; index++) {
						currObj = (value.getItemAt(index) as AlertCriteriaEntry);
						if(currObj != null) {
							tmpList.addItem(currObj);
						}
					}
				}
				
				_alertDefs.addAll(tmpList);
			}
		]]>
	</fx:Script>
</s:Group>

